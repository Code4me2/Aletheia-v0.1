#!/bin/bash

# Aletheia Developer CLI - The ONE script you need
# Consolidated from 14+ separate scripts into one unified tool
# Version: 2.0

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Project configuration
PROJECT_NAME=${COMPOSE_PROJECT_NAME:-aletheia_development}
BASE_URL=${BASE_URL:-"http://localhost:8080"}

# Determine docker-compose command to use
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null 2>&1; then
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE=""  # Will be checked later in check_requirements
fi

# Function to show usage
show_help() {
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║     Aletheia Developer CLI v2.0       ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo "Usage: ./dev [command] [options]"
    echo ""
    echo -e "${CYAN}Core Commands:${NC}"
    echo "  up [service]    Start all services (or specific one)"
    echo "  down [service]  Stop all services (or specific one)"
    echo "  restart [name]  Restart a specific service (or all if no name)"
    echo "  logs [name]     Show logs (all services or specific one)"
    echo "  status          Show detailed status of all services"
    echo "  services        List all available services"
    echo "  shell [name]    Open shell in a container"
    echo ""
    echo -e "${CYAN}Health & Validation:${NC}"
    echo "  health          Run health checks on all services"
    echo "  validate        Validate setup and configuration"
    echo "  ports           Show port usage and availability"
    echo ""
    echo -e "${CYAN}Documentation & Info:${NC}"
    echo "  docs verify     Check documentation accuracy"
    echo "  docs update     Update docs from running system (planned)"
    echo "  db schema       Show database schema"
    echo "  db shell        Open PostgreSQL shell"
    echo "  env check       Verify environment configuration"
    echo "  env list        List all environment variables"
    echo ""
    echo -e "${CYAN}n8n Automation:${NC}"
    echo "  n8n setup       Initialize owner account & activate workflows"
    echo "  n8n workflows   Manage workflows (list, import, export, execute, activate/deactivate)"
    echo "  n8n credentials Manage credentials (export, import, backup)"
    echo "  n8n monitor     Real-time execution monitoring"
    echo "  n8n query       Query execution data and statistics"
    echo "  n8n nodes       Manage custom nodes (list, build, verify)"
    echo "  n8n executions  View workflow execution history"
    echo "  n8n cli         Direct access to n8n CLI commands"
    echo ""
    echo -e "${CYAN}Setup & Maintenance:${NC}"
    echo "  setup           Initial setup wizard (generate secure .env)"
    echo "  doctor          Run comprehensive system diagnostics"
    echo "  backup          Backup database and configurations"
    echo "  rebuild [opts]  Rebuild services with cache control"
    echo "                  Options: [service] --hard --verify"
    echo "  verify-frontend Run frontend verification for lawyer-chat"
    echo "  cleanup         Archive old/backup files to .archive/"
    echo "  clean           Stop services and clean volumes (WARNING: deletes data)"
    echo "  reload-nginx    Reload nginx configuration without restart"
    echo "  seed-users      Initialize/reset lawyer-chat demo users"
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo "  ./dev up                  # Start everything"
    echo "  ./dev up n8n             # Start only n8n service"
    echo "  ./dev down lawyer-chat   # Stop only lawyer-chat"
    echo "  ./dev rebuild lawyer-chat # Rebuild lawyer-chat with standard cache clear"
    echo "  ./dev rebuild --hard      # Rebuild all with aggressive cache clearing"
    echo "  ./dev health              # Check if everything is working"
    echo "  ./dev logs n8n           # Show n8n logs"
    echo "  ./dev shell db           # Open PostgreSQL shell"
    echo "  ./dev n8n monitor executions # Real-time execution monitor"
    echo "  ./dev n8n query stats    # View execution statistics"
}

# Check if docker and $DOCKER_COMPOSE are installed
check_requirements() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Error: Docker is not installed${NC}"
        echo -e "${YELLOW}Please install Docker Desktop from: https://www.docker.com/products/docker-desktop${NC}"
        exit 1
    fi
    
    # Check for $DOCKER_COMPOSE (either standalone or plugin)
    if [ -z "$DOCKER_COMPOSE" ]; then
        echo -e "${RED}Error: $DOCKER_COMPOSE is not installed${NC}"
        echo -e "${YELLOW}Docker Compose should come with Docker Desktop. Please reinstall Docker Desktop.${NC}"
        exit 1
    fi
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        echo -e "${RED}Error: Docker daemon is not running${NC}"
        echo -e "${YELLOW}Please start Docker Desktop first:${NC}"
        echo -e "  • On macOS: Open Docker Desktop from Applications"
        echo -e "  • On Linux: Run 'sudo systemctl start docker'"
        echo -e "  • On Windows: Open Docker Desktop from Start Menu"
        echo ""
        echo -e "${CYAN}After starting Docker, run this command again.${NC}"
        exit 1
    fi
}

# Check if .env exists
check_env() {
    if [ ! -f .env ]; then
        if [ -f .env.required ]; then
            echo -e "${YELLOW}No .env file found. Creating from .env.required...${NC}"
            cp .env.required .env
            echo -e "${GREEN}Created .env file. Please edit it with your values.${NC}"
            echo -e "${YELLOW}Run './dev up' when ready.${NC}"
            exit 0
        else
            echo -e "${RED}No .env file found!${NC}"
            echo "Please create one with at least these variables:"
            echo "  DB_PASSWORD=<your_password>"
            echo "  N8N_ENCRYPTION_KEY=<your_key>"
            echo "  NEXTAUTH_SECRET=<your_secret>"
            exit 1
        fi
    fi
}

# ============================================================================
# Common Functions Library
# ============================================================================

# Exit codes for consistent error handling
readonly EXIT_SUCCESS=0
readonly EXIT_CONFIG_ERROR=1
readonly EXIT_SERVICE_UNAVAILABLE=2
readonly EXIT_PERMISSION_DENIED=3
readonly EXIT_RESOURCE_ERROR=4
readonly EXIT_USER_CANCELLED=5

# Output format (can be set via --json flag)
OUTPUT_FORMAT="${OUTPUT_FORMAT:-text}"

# Parse global flags
for arg in "$@"; do
    case $arg in
        --json)
            OUTPUT_FORMAT="json"
            shift
            ;;
    esac
done

# Check if database is ready
check_db_ready() {
    local db_user="${DB_USER:-aletheia}"
    local db_name="${DB_NAME:-aletheia}"
    
    if ! $DOCKER_COMPOSE exec -T db pg_isready -U "$db_user" &>/dev/null; then
        if [ "$OUTPUT_FORMAT" = "json" ]; then
            echo '{"status":"error","message":"Database is not running"}'
        else
            echo -e "${RED}✗ Database is not running${NC}"
            echo "  Start the database with: ./dev up db"
        fi
        return $EXIT_SERVICE_UNAVAILABLE
    fi
    return $EXIT_SUCCESS
}

# Check if a service is running
check_service_running() {
    local service="$1"
    local quiet="${2:-false}"
    
    if ! $DOCKER_COMPOSE ps "$service" 2>/dev/null | grep -q "Up\|Running"; then
        if [ "$quiet" != "true" ]; then
            if [ "$OUTPUT_FORMAT" = "json" ]; then
                echo "{\"status\":\"error\",\"service\":\"$service\",\"message\":\"Service is not running\"}"
            else
                echo -e "${YELLOW}$service is not running. Start it with: ./dev up $service${NC}"
            fi
        fi
        return $EXIT_SERVICE_UNAVAILABLE
    fi
    return $EXIT_SUCCESS
}

# Wait for a service to be ready
wait_for_service() {
    local service="$1"
    local max_wait="${2:-30}"
    local check_command="${3:-}"
    
    echo -e "${BLUE}Waiting for $service to be ready...${NC}"
    
    local count=0
    while [ $count -lt $max_wait ]; do
        if [ -n "$check_command" ]; then
            if eval "$check_command" &>/dev/null; then
                echo -e "${GREEN}✓ $service is ready${NC}"
                return $EXIT_SUCCESS
            fi
        else
            if check_service_running "$service" true; then
                echo -e "${GREEN}✓ $service is ready${NC}"
                return $EXIT_SUCCESS
            fi
        fi
        echo -n "."
        sleep 1
        count=$((count + 1))
    done
    
    echo ""
    echo -e "${RED}✗ $service failed to start within ${max_wait} seconds${NC}"
    return $EXIT_SERVICE_UNAVAILABLE
}

# Get container name for a service
get_container_name() {
    local service="$1"
    $DOCKER_COMPOSE ps -q "$service" 2>/dev/null | head -1
}

# Output in JSON format if requested
output_result() {
    local status="$1"
    local message="$2"
    local data="${3:-}"
    
    if [ "$OUTPUT_FORMAT" = "json" ]; then
        if [ -n "$data" ]; then
            echo "{\"status\":\"$status\",\"message\":\"$message\",\"data\":$data}"
        else
            echo "{\"status\":\"$status\",\"message\":\"$message\"}"
        fi
    else
        if [ "$status" = "success" ]; then
            echo -e "${GREEN}✓ $message${NC}"
        elif [ "$status" = "error" ]; then
            echo -e "${RED}✗ $message${NC}"
        elif [ "$status" = "warning" ]; then
            echo -e "${YELLOW}⚠ $message${NC}"
        else
            echo "$message"
        fi
    fi
}

# Execute command with retry logic
retry_command() {
    local cmd="$1"
    local max_attempts="${2:-3}"
    local delay="${3:-2}"
    
    for i in $(seq 1 $max_attempts); do
        if eval "$cmd"; then
            return $EXIT_SUCCESS
        fi
        
        if [ $i -lt $max_attempts ]; then
            echo "Attempt $i/$max_attempts failed, retrying in ${delay}s..."
            sleep $delay
        fi
    done
    
    return $EXIT_SERVICE_UNAVAILABLE
}

# Validate port availability
check_port() {
    local port="$1"
    local service="${2:-unknown}"
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        if [ "$OUTPUT_FORMAT" = "json" ]; then
            echo "{\"port\":$port,\"service\":\"$service\",\"status\":\"occupied\"}"
        else
            echo -e "${RED}✗ Port $port ($service) is already in use${NC}"
        fi
        return $EXIT_CONFIG_ERROR
    fi
    return $EXIT_SUCCESS
}

# ============================================================================
# End of Common Functions Library
# ============================================================================

# Main command handling
case "$1" in
    up|start)
        check_requirements
        check_env
        
        # Check if specific service requested
        if [ -n "$2" ]; then
            echo -e "${BLUE}Starting $2...${NC}"
            $DOCKER_COMPOSE up -d "$2"
            echo -e "${GREEN}✓ Service $2 started${NC}"
        else
            echo -e "${BLUE}Starting all Aletheia services...${NC}"
            $DOCKER_COMPOSE up -d
            echo ""
            echo -e "${GREEN}✓ Services started successfully!${NC}"
            echo ""
            echo "Access points:"
            echo "  • Main app:     http://localhost:${WEB_PORT:-8080}"
            echo "  • n8n:          http://localhost:${N8N_PORT:-8100}"
            echo "            Note: Check n8n/README.md for credentials"
            echo "  • Lawyer Chat:  http://localhost:${WEB_PORT:-8080}/chat"
            echo "  • AI Portal:    http://localhost:${AI_PORTAL_PORT:-8102}"
            echo ""
            echo "Run './dev logs' to see output"
            echo "Run './dev health' to check services"
            
            # Wait for database to be ready (max 30 seconds)
            DB_READY=false
            for i in {1..30}; do
                if $DOCKER_COMPOSE exec -T db pg_isready -U "${DB_USER:-aletheia}" &>/dev/null; then
                    DB_READY=true
                    break
                fi
                if [ $i -eq 1 ]; then
                    echo ""
                    echo -n "Waiting for database to be ready"
                else
                    echo -n "."
                fi
                sleep 1
            done
            
            if [ "$DB_READY" = true ]; then
                echo ""  # New line after dots
                
                # Auto-restore court data if it's a fresh database
                if [ -f court-processor/data/court_documents_backup.sql.gz ]; then
                    echo ""
                    echo -e "${BLUE}Checking for court processor data...${NC}"
                    
                    # Check if court_documents table exists and count records
                    COUNT=$($DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -t -c \
                        "SELECT COUNT(*) FROM public.court_documents" 2>/dev/null || echo "0")
                    COUNT=$(echo $COUNT | tr -d ' ')
                    
                    if [ "$COUNT" = "0" ]; then
                        echo -e "${BLUE}Restoring court processor sample data (485 documents)...${NC}"
                        if gunzip -c court-processor/data/court_documents_backup.sql.gz | \
                           $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" &>/dev/null; then
                            echo -e "${GREEN}✓ Successfully restored 485 court documents${NC}"
                            echo "  Documents are now available in Lawyer Chat interface"
                        else
                            echo -e "${YELLOW}⚠ Failed to restore court data${NC}"
                            echo "  You can manually restore with: ./dev db restore-court-data"
                        fi
                    elif [ "$COUNT" -gt "0" ]; then
                        echo -e "${GREEN}✓ Database already contains $COUNT court documents${NC}"
                    fi
                fi
                
                # Auto-initialize lawyer-chat database and seed demo users
                echo ""
                echo -e "${BLUE}Checking lawyer-chat database setup...${NC}"
                
                # Check if User table exists
                USER_TABLE_EXISTS=$($DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -t -c \
                    "SELECT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'User');" 2>/dev/null | tr -d ' ')
                
                if [ "$USER_TABLE_EXISTS" = "f" ] || [ "$USER_TABLE_EXISTS" = "false" ]; then
                    echo -e "${BLUE}Initializing lawyer-chat database...${NC}"
                    
                    # Check if lawyer-chat service directory exists
                    if [ -d "services/lawyer-chat" ]; then
                        cd services/lawyer-chat
                        
                        # URL-encode the password to handle special characters
                        ENCODED_PASSWORD=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${DB_PASSWORD}'))" 2>/dev/null || echo "${DB_PASSWORD}")
                        export DATABASE_URL="postgresql://${DB_USER:-aletheia}:${ENCODED_PASSWORD}@localhost:${POSTGRES_PORT:-8200}/${DB_NAME:-aletheia}"
                        
                        if npx prisma db push --force-reset --skip-generate &>/dev/null 2>&1; then
                            echo -e "${GREEN}✓ Database schema created${NC}"
                            
                            # Generate Prisma client
                            if npx prisma generate &>/dev/null 2>&1; then
                                echo -e "${GREEN}✓ Prisma client generated${NC}"
                                
                                # Seed demo users
                                if [ -f "scripts/seed-users.cjs" ]; then
                                    if node scripts/seed-users.cjs &>/dev/null 2>&1; then
                                        echo -e "${GREEN}✓ Demo users created:${NC}"
                                        echo "    • demo@reichmanjorgensen.com / demo123"
                                        echo "    • admin@reichmanjorgensen.com / admin123"
                                    else
                                        echo -e "${YELLOW}⚠ Failed to seed demo users${NC}"
                                        echo "  You can manually run: cd services/lawyer-chat && node scripts/seed-users.cjs"
                                    fi
                                elif [ -f "prisma/seed.ts" ]; then
                                    if npx tsx prisma/seed.ts &>/dev/null 2>&1; then
                                        echo -e "${GREEN}✓ Demo users created:${NC}"
                                        echo "    • demo@reichmanjorgensen.com / demo123"
                                        echo "    • admin@reichmanjorgensen.com / admin123"
                                    else
                                        echo -e "${YELLOW}⚠ Failed to seed demo users${NC}"
                                        echo "  You can manually run: cd services/lawyer-chat && npx tsx prisma/seed.ts"
                                    fi
                                fi
                            else
                                echo -e "${YELLOW}⚠ Failed to generate Prisma client${NC}"
                            fi
                        else
                            echo -e "${YELLOW}⚠ Failed to initialize database schema${NC}"
                            echo "  You can manually run: cd services/lawyer-chat && npx prisma db push"
                        fi
                        
                        cd - &>/dev/null
                    else
                        echo -e "${YELLOW}⚠ Lawyer-chat service directory not found${NC}"
                    fi
                else
                    # Check if demo users exist
                    USER_COUNT=$($DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -t -c \
                        "SELECT COUNT(*) FROM \"User\" WHERE email IN ('demo@reichmanjorgensen.com', 'admin@reichmanjorgensen.com');" 2>/dev/null | tr -d ' ')
                    
                    if [ "$USER_COUNT" = "0" ]; then
                        echo -e "${BLUE}Seeding demo users...${NC}"
                        
                        if [ -d "services/lawyer-chat" ]; then
                            cd services/lawyer-chat
                            # URL-encode the password to handle special characters
                            ENCODED_PASSWORD=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${DB_PASSWORD}'))" 2>/dev/null || echo "${DB_PASSWORD}")
                            export DATABASE_URL="postgresql://${DB_USER:-aletheia}:${ENCODED_PASSWORD}@localhost:${POSTGRES_PORT:-8200}/${DB_NAME:-aletheia}"
                            
                            if [ -f "scripts/seed-users.cjs" ]; then
                                if node scripts/seed-users.cjs &>/dev/null 2>&1; then
                                    echo -e "${GREEN}✓ Demo users created:${NC}"
                                    echo "    • demo@reichmanjorgensen.com / demo123"
                                    echo "    • admin@reichmanjorgensen.com / admin123"
                                else
                                    echo -e "${YELLOW}⚠ Failed to seed demo users${NC}"
                                fi
                            fi
                            
                            cd - &>/dev/null
                        fi
                    else
                        echo -e "${GREEN}✓ Lawyer-chat database ready ($USER_COUNT demo users found)${NC}"
                    fi
                fi
            else
                echo ""  # New line after dots
                echo -e "${YELLOW}⚠ Database not ready${NC}"
                echo "  Database initialization skipped - run './dev up' again when ready"
            fi
        fi
        ;;
        
    down|stop)
        check_requirements
        
        # Check if specific service requested
        if [ -n "$2" ]; then
            echo -e "${BLUE}Stopping $2...${NC}"
            $DOCKER_COMPOSE stop "$2"
            echo -e "${GREEN}✓ Service $2 stopped${NC}"
        else
            echo -e "${BLUE}Stopping all Aletheia services...${NC}"
            $DOCKER_COMPOSE down
            echo -e "${GREEN}✓ All services stopped${NC}"
        fi
        ;;
        
    restart)
        check_requirements
        if [ -z "$2" ]; then
            echo -e "${BLUE}Restarting all services...${NC}"
            $DOCKER_COMPOSE restart
        else
            echo -e "${BLUE}Restarting $2...${NC}"
            $DOCKER_COMPOSE restart "$2"
        fi
        echo -e "${GREEN}✓ Restart complete${NC}"
        ;;
        
    logs|log)
        check_requirements
        if [ -z "$2" ]; then
            $DOCKER_COMPOSE logs -f --tail=100
        else
            $DOCKER_COMPOSE logs -f --tail=100 "$2"
        fi
        ;;
        
    status|ps)
        check_requirements
        
        if [ "$OUTPUT_FORMAT" != "json" ]; then
            echo -e "${BLUE}═══════════════════════════════════════${NC}"
            echo -e "${BLUE}  Service Status${NC}"
            echo -e "${BLUE}═══════════════════════════════════════${NC}"
            echo ""
            
            # Container status
            echo -e "${CYAN}Containers:${NC}"
            $DOCKER_COMPOSE ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            
            # Health status
            echo -e "${CYAN}Health Status:${NC}"
        fi
        
        healthy=0
        unhealthy=0
        nocheck=0
        services_json="["
        first=true
        
        for container in $(docker ps --format "{{.Names}}" --filter "label=com.docker.compose.project=${PROJECT_NAME}"); do
            # Special handling for known containers without standard health checks
            if [[ "$container" == *"recap-webhook"* ]]; then
                if [ "$OUTPUT_FORMAT" != "json" ]; then
                    echo -e "${YELLOW}○${NC} $container: health check ignored"
                fi
                nocheck=$((nocheck + 1))
                continue
            fi
            
            # Try to get health status
            health=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}no check{{end}}' "$container" 2>/dev/null || echo "error")
            
            case "$health" in
                healthy)
                    if [ "$OUTPUT_FORMAT" != "json" ]; then
                        echo -e "${GREEN}✓${NC} $container: healthy"
                    fi
                    healthy=$((healthy + 1))
                    health_json="\"healthy\""
                    ;;
                unhealthy|starting)
                    # Skip recap-webhook unhealthy status as it's expected
                    if [[ "$container" != *"recap-webhook"* ]]; then
                        if [ "$OUTPUT_FORMAT" != "json" ]; then
                            echo -e "${RED}✗${NC} $container: $health"
                        fi
                        unhealthy=$((unhealthy + 1))
                    fi
                    health_json="\"$health\""
                    ;;
                "no check"|"")
                    if [ "$OUTPUT_FORMAT" != "json" ]; then
                        echo -e "${YELLOW}○${NC} $container: no health check"
                    fi
                    nocheck=$((nocheck + 1))
                    health_json="\"no_check\""
                    ;;
                error)
                    if [ "$OUTPUT_FORMAT" != "json" ]; then
                        echo -e "${RED}✗${NC} $container: inspection failed"
                    fi
                    unhealthy=$((unhealthy + 1))
                    health_json="\"error\""
                    ;;
            esac
            
            # Build JSON array
            if [ "$OUTPUT_FORMAT" = "json" ]; then
                if [ "$first" = true ]; then
                    first=false
                else
                    services_json="${services_json},"
                fi
                services_json="${services_json}{\"name\":\"$container\",\"health\":$health_json}"
            fi
        done
        
        if [ "$OUTPUT_FORMAT" = "json" ]; then
            services_json="${services_json}]"
            echo "{\"healthy\":$healthy,\"unhealthy\":$unhealthy,\"nocheck\":$nocheck,\"services\":$services_json}"
        else
            echo ""
            echo "Summary: ${GREEN}$healthy healthy${NC}, ${RED}$unhealthy issues${NC}, ${YELLOW}$nocheck unchecked${NC}"
        fi
        ;;
        
    shell|exec)
        check_requirements
        if [ -z "$2" ]; then
            echo -e "${RED}Please specify a service name${NC}"
            echo "Example: ./dev shell db"
            exit 1
        fi
        
        case "$2" in
            db|postgres)
                echo -e "${BLUE}Opening PostgreSQL shell...${NC}"
                $DOCKER_COMPOSE exec db psql -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}"
                ;;
            n8n)
                echo -e "${BLUE}Opening n8n shell...${NC}"
                $DOCKER_COMPOSE exec n8n /bin/sh
                ;;
            *)
                echo -e "${BLUE}Opening shell in $2...${NC}"
                $DOCKER_COMPOSE exec "$2" /bin/sh 2>/dev/null || $DOCKER_COMPOSE exec "$2" /bin/bash
                ;;
        esac
        ;;
        
    clean)
        echo -e "${YELLOW}WARNING: This will delete all data!${NC}"
        echo -n "Are you sure? (y/N): "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Cleaning up...${NC}"
            $DOCKER_COMPOSE down -v
            echo -e "${GREEN}✓ Cleanup complete${NC}"
        else
            echo "Cancelled"
        fi
        ;;
        
    cleanup)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Archiving Old Files${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Create archive directories
        mkdir -p .archive/{nginx,docker,tests,misc}
        
        # Archive nginx configs
        echo -e "${CYAN}Archiving old nginx configs...${NC}"
        moved=0
        for file in nginx/conf.d/*.bak nginx/conf.d/*.disabled nginx/conf.d/*.backup; do
            if [ -f "$file" ]; then
                mv "$file" .archive/nginx/ 2>/dev/null && moved=$((moved + 1))
            fi
        done
        [ $moved -gt 0 ] && echo -e "${GREEN}✓${NC} Archived $moved nginx config files"
        
        # Archive old $DOCKER_COMPOSE files
        echo -e "${CYAN}Archiving unused $DOCKER_COMPOSE files...${NC}"
        moved=0
        for file in $DOCKER_COMPOSE.{unified,staging,swarm,env}.yml; do
            if [ -f "$file" ]; then
                mv "$file" .archive/docker/ 2>/dev/null && moved=$((moved + 1))
            fi
        done
        [ $moved -gt 0 ] && echo -e "${GREEN}✓${NC} Archived $moved $DOCKER_COMPOSE files"
        
        # Find and archive .bak files
        echo -e "${CYAN}Finding backup files...${NC}"
        found=$(find . -maxdepth 3 -name "*.bak" -o -name "*.backup*" 2>/dev/null | grep -v .archive | wc -l)
        if [ $found -gt 0 ]; then
            echo -e "${YELLOW}Found $found backup files. Archive them? (y/N): ${NC}"
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                find . -maxdepth 3 \( -name "*.bak" -o -name "*.backup*" \) -not -path "./.archive/*" -exec mv {} .archive/misc/ \; 2>/dev/null
                echo -e "${GREEN}✓${NC} Archived backup files"
            fi
        fi
        
        # Report on test directories
        echo ""
        echo -e "${CYAN}Test directories found:${NC}"
        [ -d "pacer-test-implementation" ] && echo "  • pacer-test-implementation/ ($(find pacer-test-implementation -type f | wc -l) files)"
        [ -d "test" ] && echo "  • test/ ($(find test -type f | wc -l) files)"
        [ -d "test-data" ] && echo "  • test-data/ ($(find test-data -type f | wc -l) files)"
        [ -d "tests" ] && echo "  • tests/ ($(find tests -type f | wc -l) files)"
        echo ""
        echo -e "${YELLOW}Note: Test directories need manual review before archiving${NC}"
        echo "To consolidate: mv test* tests/ && mv pacer-test-implementation tests/"
        
        echo ""
        echo -e "${GREEN}Cleanup complete!${NC}"
        echo "Archived files are in .archive/"
        ;;
        
    health|check)
        check_requirements
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Health Checks${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        failed=0
        
        # Check main services
        echo -e "${CYAN}Web Services:${NC}"
        status=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Main Application (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Main Application (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check n8n
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${N8N_PORT:-8100}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ] || [ "$status" = "302" ]; then
            echo -e "${GREEN}✓${NC} n8n Interface (HTTP $status)"
        else
            echo -e "${RED}✗${NC} n8n Interface (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check Lawyer Chat
        status=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/chat" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Lawyer Chat (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Lawyer Chat (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check AI Portal
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${AI_PORTAL_PORT:-8102}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} AI Portal (HTTP $status)"
        else
            echo -e "${RED}✗${NC} AI Portal (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check Court Processor
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${COURT_PROCESSOR_PORT:-8104}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Court Processor API (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Court Processor API (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check database
        echo ""
        echo -e "${CYAN}Database:${NC}"
        if $DOCKER_COMPOSE exec -T db pg_isready > /dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} PostgreSQL is ready"
        else
            echo -e "${RED}✗${NC} PostgreSQL is not ready"
            failed=$((failed + 1))
        fi
        
        echo ""
        if [ $failed -eq 0 ]; then
            echo -e "${GREEN}✅ All health checks passed!${NC}"
        else
            echo -e "${RED}❌ $failed health checks failed${NC}"
        fi
        ;;
        
    validate)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Comprehensive System Validation${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        issues=0
        warnings=0
        
        # Docker checks
        echo -e "${CYAN}1. Docker Environment:${NC}"
        if command -v docker &> /dev/null; then
            echo -e "${GREEN}✓${NC} Docker installed"
        else
            echo -e "${RED}✗${NC} Docker not installed"
            issues=$((issues + 1))
        fi
        
        if docker info &> /dev/null; then
            echo -e "${GREEN}✓${NC} Docker daemon running"
        else
            echo -e "${RED}✗${NC} Docker daemon not running"
            issues=$((issues + 1))
        fi
        
        if [ -n "$DOCKER_COMPOSE" ]; then
            echo -e "${GREEN}✓${NC} docker-compose installed"
        else
            echo -e "${RED}✗${NC} docker-compose not installed"
            issues=$((issues + 1))
        fi
        
        # File checks
        echo ""
        echo -e "${CYAN}2. Configuration Files:${NC}"
        if [ -f .env ]; then
            echo -e "${GREEN}✓${NC} .env exists"
            source .env
            # Check for common weak passwords
            if [[ "$DB_PASSWORD" =~ ^(password|123456|admin|default|aletheia123|postgres)$ ]]; then
                echo -e "${YELLOW}⚠${NC}  DB_PASSWORD appears to be a weak/default password (security risk)"
                warnings=$((warnings + 1))
            fi
        else
            echo -e "${RED}✗${NC} .env missing"
            issues=$((issues + 1))
        fi
        
        if [ -f $DOCKER_COMPOSE.yml ]; then
            echo -e "${GREEN}✓${NC} $DOCKER_COMPOSE.yml exists"
            # Validate $DOCKER_COMPOSE syntax
            if $DOCKER_COMPOSE config > /dev/null 2>&1; then
                echo -e "${GREEN}✓${NC} $DOCKER_COMPOSE.yml syntax valid"
            else
                echo -e "${RED}✗${NC} $DOCKER_COMPOSE.yml has syntax errors"
                issues=$((issues + 1))
            fi
        else
            echo -e "${RED}✗${NC} $DOCKER_COMPOSE.yml missing"
            issues=$((issues + 1))
        fi
        
        # Port availability
        echo ""
        echo -e "${CYAN}3. Port Availability:${NC}"
        ports_to_check="${WEB_PORT:-8080} ${N8N_PORT:-8100} ${AI_PORTAL_PORT:-8102} ${COURT_PROCESSOR_PORT:-8104} ${POSTGRES_PORT:-8200} ${REDIS_PORT:-8201}"
        port_issues=0
        for port in $ports_to_check; do
            if lsof -i :$port > /dev/null 2>&1; then
                service_name=$(docker ps --format "table {{.Names}}\t{{.Ports}}" | grep $port | awk '{print $1}' | head -1)
                if [ -n "$service_name" ]; then
                    echo -e "${GREEN}✓${NC} Port $port in use by $service_name (expected)"
                else
                    echo -e "${YELLOW}⚠${NC}  Port $port in use by non-Docker process"
                    port_issues=$((port_issues + 1))
                fi
            else
                echo -e "${GREEN}✓${NC} Port $port available"
            fi
        done
        
        if [ $port_issues -gt 0 ]; then
            warnings=$((warnings + port_issues))
        fi
        
        # Service health
        echo ""
        echo -e "${CYAN}4. Service Health:${NC}"
        if $DOCKER_COMPOSE ps 2>/dev/null | grep -q "Up"; then
            healthy=$(docker ps --filter "health=healthy" --format "{{.Names}}" | wc -l | tr -d ' ')
            unhealthy=$(docker ps --filter "health=unhealthy" --format "{{.Names}}" | wc -l | tr -d ' ')
            total=$(docker ps --format "{{.Names}}" | wc -l | tr -d ' ')
            
            echo -e "${GREEN}✓${NC} $total services running"
            if [ "$healthy" -gt 0 ]; then
                echo -e "${GREEN}✓${NC} $healthy services healthy"
            fi
            if [ "$unhealthy" -gt 0 ]; then
                echo -e "${YELLOW}⚠${NC}  $unhealthy services unhealthy"
                warnings=$((warnings + unhealthy))
            fi
        else
            echo -e "${YELLOW}⚠${NC}  No services running"
        fi
        
        # Documentation check
        echo ""
        echo -e "${CYAN}5. Documentation:${NC}"
        if [ -f docs/SERVICE_DEPENDENCIES.md ] && [ -f docs/PORT_CONFIGURATION.md ] && [ -f docs/DATABASE.md ]; then
            echo -e "${GREEN}✓${NC} Core documentation present"
        else
            echo -e "${YELLOW}⚠${NC}  Some documentation missing"
            warnings=$((warnings + 1))
        fi
        
        # Disk space
        echo ""
        echo -e "${CYAN}6. System Resources:${NC}"
        available_space=$(df -h . | awk 'NR==2 {print $4}')
        echo "  Disk space available: $available_space"
        
        # Summary
        echo ""
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        if [ $issues -eq 0 ] && [ $warnings -eq 0 ]; then
            echo -e "${GREEN}✅ All validation checks passed!${NC}"
        elif [ $issues -eq 0 ]; then
            echo -e "${YELLOW}⚠ System operational with $warnings warning(s)${NC}"
        else
            echo -e "${RED}❌ Found $issues critical issue(s) and $warnings warning(s)${NC}"
            echo ""
            echo "Run './dev setup' to fix configuration issues"
        fi
        ;;
        
    backup)
        check_requirements
        echo -e "${BLUE}Creating backup...${NC}"
        
        timestamp=$(date +%Y%m%d_%H%M%S)
        backup_dir="backups"
        mkdir -p "$backup_dir"
        
        # Backup database
        if $DOCKER_COMPOSE exec -T db pg_dump -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}" > "$backup_dir/db_backup_${timestamp}.sql" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Database backed up to $backup_dir/db_backup_${timestamp}.sql"
        else
            echo -e "${YELLOW}⚠${NC} Database backup skipped (not running?)"
        fi
        
        # Backup .env
        if [ -f .env ]; then
            cp .env "$backup_dir/.env.backup_${timestamp}"
            echo -e "${GREEN}✓${NC} Configuration backed up"
        fi
        
        echo ""
        echo -e "${GREEN}Backup complete!${NC}"
        ;;
        
    reload-nginx)
        check_requirements
        echo -e "${BLUE}Reloading nginx configuration...${NC}"
        
        if $DOCKER_COMPOSE exec -T web nginx -t 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Configuration valid"
            $DOCKER_COMPOSE exec -T web nginx -s reload 2>/dev/null
            echo -e "${GREEN}✓${NC} Nginx reloaded"
        else
            echo -e "${RED}✗${NC} Configuration invalid"
        fi
        ;;
        
    ports)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Port Configuration${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        if [ -f .env ]; then
            source .env
        fi
        
        echo -e "${CYAN}Configured Ports:${NC}"
        echo "  Web Interface:    ${WEB_PORT:-8080}"
        echo "  n8n:             ${N8N_PORT:-8100}"
        echo "  AI Portal:       ${AI_PORTAL_PORT:-8102}"
        echo "  Court Processor: ${COURT_PROCESSOR_PORT:-8104}"
        echo "  PostgreSQL:      ${POSTGRES_PORT:-8200}"
        echo "  Redis:           ${REDIS_PORT:-8201}"
        echo "  Docker API:      ${DOCKER_API_PORT:-5002}"
        echo "  RECAP Webhook:   ${RECAP_WEBHOOK_PORT:-5001}"
        echo ""
        ;;
        
    services|list)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Available Services${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        echo -e "${CYAN}Core Services:${NC}"
        echo "  web              - NGINX web server"
        echo "  db               - PostgreSQL database"
        echo "  redis            - Redis cache"
        echo "  n8n              - Workflow automation"
        echo ""
        
        echo -e "${CYAN}Application Services:${NC}"
        echo "  lawyer-chat      - Legal chat application"
        echo "  ai-portal        - AI services portal"
        echo "  ai-portal-nginx  - AI portal proxy"
        echo "  court-processor  - Court document processor"
        echo ""
        
        echo -e "${CYAN}Support Services:${NC}"
        echo "  docker-api       - Docker API proxy"
        echo "  recap-webhook    - RECAP webhook service"
        echo ""
        
        echo "Use: ./dev up [service] to start a specific service"
        echo "Use: ./dev down [service] to stop a specific service"
        ;;
        
    setup)
        # Check for non-interactive mode
        NON_INTERACTIVE=false
        FORCE=false
        for arg in "$@"; do
            case $arg in
                --non-interactive|-n)
                    NON_INTERACTIVE=true
                    ;;
                --force|-f)
                    FORCE=true
                    ;;
                --help|-h)
                    echo "Usage: ./dev setup [options]"
                    echo ""
                    echo "Options:"
                    echo "  --non-interactive, -n  Run without prompts (auto-backup existing .env)"
                    echo "  --force, -f           Overwrite .env without backup"
                    echo "  --help, -h            Show this help message"
                    exit 0
                    ;;
            esac
        done
        
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║       Aletheia Setup Wizard            ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo ""
        
        if [ -f .env ]; then
            if [ "$FORCE" = true ]; then
                echo -e "${YELLOW}⚠ Overwriting existing .env file (--force)${NC}"
            elif [ "$NON_INTERACTIVE" = true ]; then
                timestamp=$(date +%Y%m%d_%H%M%S)
                cp .env ".env.backup_${timestamp}"
                echo -e "${GREEN}✓ Backed up existing .env to .env.backup_${timestamp}${NC}"
            else
                echo -e "${YELLOW}⚠ .env file already exists${NC}"
                echo -n "Backup and create new? (y/N): "
                read -r response
                if [[ ! "$response" =~ ^[Yy]$ ]]; then
                    echo "Setup cancelled"
                    exit 0
                fi
                
                timestamp=$(date +%Y%m%d_%H%M%S)
                cp .env ".env.backup_${timestamp}"
                echo -e "${GREEN}✓ Backed up to .env.backup_${timestamp}${NC}"
            fi
        fi
        
        # Generate secure passwords
        generate_password() {
            LC_ALL=C tr -dc 'A-Za-z0-9!@#%^&*()_+=' < /dev/urandom | head -c "${1:-32}"
        }
        
        # Create .env
        cat > .env << EOF
# Aletheia Configuration - Generated $(date)
COMPOSE_PROJECT_NAME=aletheia_development
ENVIRONMENT=development

# Database
DB_USER=aletheia
DB_PASSWORD=$(generate_password 32)
DB_NAME=aletheia
DB_HOST=db
DB_PORT=5432

# Ports
WEB_PORT=8080
N8N_PORT=8100
AI_PORTAL_PORT=8102
COURT_PROCESSOR_PORT=8104
POSTGRES_PORT=8200
REDIS_PORT=8201

# Security
N8N_ENCRYPTION_KEY=$(generate_password 32)
NEXTAUTH_SECRET=$(generate_password 64)
N8N_WEBHOOK_ID=c188c31c-1c45-4118-9ece-5b6057ab5177

# Optional - N8N API Credentials (leave empty if not using API)
N8N_API_KEY=
N8N_API_SECRET=

# Optional - AI Service Keys
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
EOF
        
        echo -e "${GREEN}✓ Generated .env with secure credentials${NC}"
        echo ""
        
        # Notify about court data restoration
        if [ -f court-processor/data/court_documents_backup.sql.gz ]; then
            echo -e "${CYAN}Court processor data backup found (485 documents, ~9.5MB)${NC}"
            echo -e "${GREEN}✓ Will be automatically restored when services start${NC}"
        fi
        
        # Notify about n8n auto-setup
        echo ""
        echo -e "${CYAN}n8n Automation:${NC}"
        echo -e "${GREEN}✓ Owner account will be created automatically${NC}"
        echo -e "${GREEN}✓ Workflows will be activated on first start${NC}"
        echo "  Login: admin@aletheia.local / admin123"
        
        echo ""
        echo "Next: Run './dev up' to start services"
        ;;
        
    docs)
        case "$2" in
            verify)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Documentation Verification${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                errors=0
                
                # Check SERVICE_DEPENDENCIES.md
                echo -e "${CYAN}Checking SERVICE_DEPENDENCIES.md...${NC}"
                if [ -f docs/SERVICE_DEPENDENCIES.md ]; then
                    deps_in_compose=$(grep -c "depends_on:" $DOCKER_COMPOSE.yml 2>/dev/null || echo "0")
                    deps_in_docs=$(grep -c "→" docs/SERVICE_DEPENDENCIES.md 2>/dev/null || echo "0")
                    if [ "$deps_in_compose" -gt 0 ] && [ "$deps_in_docs" -gt 0 ]; then
                        echo -e "${GREEN}✓${NC} SERVICE_DEPENDENCIES.md exists"
                    else
                        echo -e "${YELLOW}⚠${NC}  SERVICE_DEPENDENCIES.md may need updating"
                        errors=$((errors + 1))
                    fi
                else
                    echo -e "${RED}✗${NC} SERVICE_DEPENDENCIES.md missing"
                    errors=$((errors + 1))
                fi
                
                # Check PORT_CONFIGURATION.md
                echo -e "${CYAN}Checking PORT_CONFIGURATION.md...${NC}"
                if [ -f docs/PORT_CONFIGURATION.md ]; then
                    echo -e "${GREEN}✓${NC} PORT_CONFIGURATION.md exists"
                    # Check if ports in .env match documentation
                    if [ -f .env ]; then
                        source .env
                        if grep -q "8080" docs/PORT_CONFIGURATION.md && grep -q "8100" docs/PORT_CONFIGURATION.md; then
                            echo -e "${GREEN}✓${NC} Port documentation appears current"
                        else
                            echo -e "${YELLOW}⚠${NC}  Port documentation may be outdated"
                        fi
                    fi
                else
                    echo -e "${RED}✗${NC} PORT_CONFIGURATION.md missing"
                    errors=$((errors + 1))
                fi
                
                # Check DATABASE.md
                echo -e "${CYAN}Checking DATABASE.md...${NC}"
                if [ -f docs/DATABASE.md ]; then
                    echo -e "${GREEN}✓${NC} DATABASE.md exists"
                    # Check if it mentions the actual tables
                    if $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\dt court_data.*" 2>/dev/null | grep -q "opinions_unified"; then
                        if grep -q "opinions_unified" docs/DATABASE.md; then
                            echo -e "${GREEN}✓${NC} Database documentation includes main tables"
                        else
                            echo -e "${YELLOW}⚠${NC}  Database documentation may be outdated"
                            errors=$((errors + 1))
                        fi
                    fi
                else
                    echo -e "${RED}✗${NC} DATABASE.md missing"
                    errors=$((errors + 1))
                fi
                
                echo ""
                if [ $errors -eq 0 ]; then
                    echo -e "${GREEN}✅ All documentation verified!${NC}"
                else
                    echo -e "${YELLOW}⚠ Found $errors documentation issue(s)${NC}"
                    echo "Run './dev docs update' to regenerate documentation"
                fi
                ;;
                
            update)
                echo -e "${BLUE}Updating documentation from current system...${NC}"
                echo -e "${YELLOW}This feature is planned but not yet implemented${NC}"
                echo "Would generate:"
                echo "  - SERVICE_DEPENDENCIES.md from $DOCKER_COMPOSE.yml"
                echo "  - DATABASE.md from actual database schema"
                echo "  - PORT_CONFIGURATION.md from running containers"
                ;;
                
            *)
                echo "Usage: ./dev docs [verify|update]"
                echo "  verify - Check documentation accuracy"
                echo "  update - Update docs from running system"
                ;;
        esac
        ;;
        
    db)
        case "$2" in
            schema)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Database Schema${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                if ! $DOCKER_COMPOSE ps | grep -q "db.*Up"; then
                    echo -e "${RED}Database is not running. Start it with './dev up'${NC}"
                    exit 1
                fi
                
                echo -e "${CYAN}Schemas:${NC}"
                $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\dn" 2>/dev/null
                
                echo -e "${CYAN}Tables in court_data schema:${NC}"
                $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\dt court_data.*" 2>/dev/null
                
                if [ "$3" = "--detailed" ]; then
                    echo ""
                    echo -e "${CYAN}Table structures:${NC}"
                    for table in opinions_unified judges cl_opinions cl_dockets; do
                        echo ""
                        echo -e "${YELLOW}Table: court_data.$table${NC}"
                        $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\d court_data.$table" 2>/dev/null | head -20
                    done
                fi
                ;;
                
            shell)
                check_requirements
                echo -e "${BLUE}Opening database shell...${NC}"
                $DOCKER_COMPOSE exec db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}"
                ;;
                
            backup)
                check_requirements
                echo -e "${BLUE}Creating database backup...${NC}"
                timestamp=$(date +%Y%m%d_%H%M%S)
                backup_dir="backups"
                mkdir -p "$backup_dir"
                
                if $DOCKER_COMPOSE exec -T db pg_dump -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}" > "$backup_dir/db_backup_${timestamp}.sql" 2>/dev/null; then
                    echo -e "${GREEN}✓${NC} Database backed up to $backup_dir/db_backup_${timestamp}.sql"
                    size=$(du -h "$backup_dir/db_backup_${timestamp}.sql" | cut -f1)
                    echo "  Size: $size"
                else
                    echo -e "${RED}✗${NC} Database backup failed"
                    exit 1
                fi
                ;;
                
            restore)
                if [ -z "$3" ]; then
                    echo "Usage: ./dev db restore <backup_file>"
                    echo "Available backups:"
                    ls -la backups/*.sql 2>/dev/null || echo "No backups found"
                    exit 1
                fi
                
                if [ ! -f "$3" ]; then
                    echo -e "${RED}Backup file not found: $3${NC}"
                    exit 1
                fi
                
                echo -e "${YELLOW}⚠ WARNING: This will replace the current database!${NC}"
                read -p "Continue? (y/N): " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    echo -e "${BLUE}Restoring database...${NC}"
                    $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" < "$3"
                    echo -e "${GREEN}✓${NC} Database restored"
                fi
                ;;
                
            restore-court-data)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Court Processor Data Restoration${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                # Check if backup exists
                if [ ! -f court-processor/data/court_documents_backup.sql.gz ]; then
                    echo -e "${RED}✗${NC} Court data backup not found"
                    echo "  Expected location: court-processor/data/court_documents_backup.sql.gz"
                    exit 1
                fi
                
                # Check if database is running
                if ! $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "SELECT 1" &>/dev/null; then
                    echo -e "${RED}✗${NC} Database is not running or not ready"
                    echo "  Run './dev up' first to start services"
                    exit 1
                fi
                
                # Check existing data
                EXISTING_COUNT=$($DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -t -c "SELECT COUNT(*) FROM public.court_documents" 2>/dev/null || echo "0")
                EXISTING_COUNT=$(echo $EXISTING_COUNT | tr -d ' ')
                
                if [ "$EXISTING_COUNT" -gt "0" ]; then
                    echo -e "${YELLOW}⚠${NC} Table already contains $EXISTING_COUNT documents"
                    read -p "Replace existing data? (y/N): " -n 1 -r
                    echo
                    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                        echo "Restoration cancelled"
                        exit 0
                    fi
                    echo -e "${BLUE}Clearing existing data...${NC}"
                    $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "TRUNCATE TABLE public.court_documents RESTART IDENTITY CASCADE;"
                fi
                
                # Restore the data
                echo -e "${BLUE}Importing court documents (485 documents, ~9.5MB)...${NC}"
                gunzip -c court-processor/data/court_documents_backup.sql.gz | $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}"
                
                # Verify restoration
                NEW_COUNT=$($DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -t -c "SELECT COUNT(*) FROM public.court_documents")
                NEW_COUNT=$(echo $NEW_COUNT | tr -d ' ')
                
                echo ""
                echo -e "${GREEN}✓ Successfully restored $NEW_COUNT court documents${NC}"
                echo ""
                echo -e "${CYAN}Document types:${NC}"
                $DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "SELECT document_type, COUNT(*) as count FROM public.court_documents GROUP BY document_type ORDER BY count DESC;"
                ;;
                
            *)
                echo "Usage: ./dev db [schema|shell|backup|restore|restore-court-data]"
                echo "  schema [--detailed]  - Show database schema"
                echo "  shell               - Open PostgreSQL shell"
                echo "  backup              - Create database backup"
                echo "  restore <file>      - Restore from backup"
                echo "  restore-court-data  - Restore court processor sample data"
                ;;
        esac
        ;;
    
    n8n)
        case "$2" in
            setup)
                echo -e "${BLUE}Running n8n auto-setup...${NC}"
                if ! check_service_running "n8n"; then
                    exit $EXIT_SERVICE_UNAVAILABLE
                fi
                
                # Run auto-setup
                $DOCKER_COMPOSE exec -T n8n sh /usr/local/bin/auto-setup
                
                echo ""
                echo -e "${GREEN}Setup complete!${NC}"
                echo "Access n8n at: http://localhost:${N8N_PORT:-8100}"
                echo "Login: admin@aletheia.local / admin123"
                ;;
            workflows)
                case "$3" in
                    list)
                        echo -e "${BLUE}Listing n8n workflows...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        # Execute n8n CLI inside container to list workflows
                        $DOCKER_COMPOSE exec -T n8n n8n list:workflow 2>/dev/null || {
                            echo -e "${RED}Failed to list workflows. n8n may still be starting up.${NC}"
                            exit 1
                        }
                        ;;
                    import)
                        echo -e "${BLUE}Importing workflows to n8n...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Check if workflow_json directory exists
                        if [ ! -d "workflow_json" ]; then
                            echo -e "${RED}workflow_json directory not found${NC}"
                            exit 1
                        fi
                        
                        # Count workflow files
                        workflow_count=$(find workflow_json -name "*.json" -type f 2>/dev/null | wc -l)
                        if [ $workflow_count -eq 0 ]; then
                            echo -e "${YELLOW}No workflow files found in workflow_json/${NC}"
                            exit 0
                        fi
                        
                        echo "Found $workflow_count workflow file(s) to import"
                        
                        # Copy workflows to container and import
                        for workflow_file in workflow_json/*.json; do
                            if [ -f "$workflow_file" ]; then
                                basename=$(basename "$workflow_file")
                                echo -n "  • Importing $basename... "
                                
                                # Copy file to container
                                docker cp "$workflow_file" "$(docker-compose ps -q n8n):/tmp/$basename"
                                
                                # Import using n8n CLI
                                if $DOCKER_COMPOSE exec -T n8n n8n import:workflow --input="/tmp/$basename" 2>/dev/null; then
                                    echo -e "${GREEN}✓${NC}"
                                else
                                    echo -e "${RED}✗${NC}"
                                fi
                                
                                # Clean up temp file
                                $DOCKER_COMPOSE exec -T n8n rm -f "/tmp/$basename"
                            fi
                        done
                        
                        echo -e "${GREEN}Workflow import complete${NC}"
                        ;;
                    export)
                        echo -e "${BLUE}Exporting n8n workflows...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Create export directory
                        export_dir="workflow_export_$(date +%Y%m%d_%H%M%S)"
                        mkdir -p "$export_dir"
                        
                        echo "Exporting workflows to $export_dir/"
                        
                        # Get list of workflows and export each
                        # Skip "User settings..." and header lines
                        workflow_list=$($DOCKER_COMPOSE exec -T n8n n8n list:workflow 2>/dev/null | grep -v "User settings" | grep -v "Error tracking" | grep "|")
                        
                        if [ -z "$workflow_list" ]; then
                            echo -e "${YELLOW}No workflows found to export${NC}"
                            rmdir "$export_dir"
                            exit 0
                        fi
                        
                        echo "$workflow_list" | while IFS='|' read -r workflow_id workflow_name rest; do
                            workflow_id=$(echo "$workflow_id" | tr -d ' ')
                            workflow_name=$(echo "$workflow_name" | tr -d ' ' | tr '/' '_')
                            
                            if [ -z "$workflow_id" ] || [ "$workflow_id" = "ID" ]; then
                                continue
                            fi
                            
                            echo -n "  • Exporting workflow $workflow_id ($workflow_name)... "
                            
                            # Export workflow to container temp file
                            if $DOCKER_COMPOSE exec -T n8n n8n export:workflow --id="$workflow_id" --output="/tmp/workflow_$workflow_id.json" 2>/dev/null; then
                                # Copy from container to host
                                docker cp "$($DOCKER_COMPOSE ps -q n8n):/tmp/workflow_$workflow_id.json" "$export_dir/${workflow_name}.json" 2>/dev/null
                                $DOCKER_COMPOSE exec -T n8n rm -f "/tmp/workflow_$workflow_id.json" 2>/dev/null
                                echo -e "${GREEN}✓${NC}"
                            else
                                echo -e "${RED}✗${NC}"
                            fi
                        done
                        
                        echo -e "${GREEN}Workflows exported to $export_dir/${NC}"
                        ;;
                    reset)
                        echo -e "${YELLOW}This will clear all n8n workflows and reimport from workflow_json/${NC}"
                        read -p "Are you sure? (y/N) " -n 1 -r
                        echo
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            echo -e "${BLUE}Resetting n8n workflows...${NC}"
                            
                            # Stop n8n
                            echo "Stopping n8n..."
                            $DOCKER_COMPOSE stop n8n
                            
                            # Clear the database volume
                            echo "Clearing n8n database..."
                            docker volume rm "${PROJECT_NAME}_n8n_data" 2>/dev/null || true
                            
                            # Start n8n with force reimport
                            echo "Starting n8n with force reimport..."
                            FORCE_REIMPORT=true $DOCKER_COMPOSE up -d n8n
                            
                            echo -e "${GREEN}Workflow reset initiated. Check logs with: ./dev logs n8n${NC}"
                        else
                            echo "Cancelled"
                        fi
                        ;;
                    activate)
                        echo -e "${BLUE}Activating all n8n workflows...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        if $DOCKER_COMPOSE exec -T n8n n8n update:workflow --all --active=true 2>/dev/null; then
                            echo -e "${GREEN}All workflows activated${NC}"
                        else
                            echo -e "${RED}Failed to activate workflows${NC}"
                            exit 1
                        fi
                        ;;
                    deactivate)
                        if [ -z "$4" ]; then
                            echo -e "${BLUE}Deactivating all n8n workflows...${NC}"
                            if ! check_service_running "n8n"; then
                                exit $EXIT_SERVICE_UNAVAILABLE
                            fi
                            
                            if $DOCKER_COMPOSE exec -T n8n n8n update:workflow --all --active=false 2>/dev/null; then
                                echo -e "${GREEN}All workflows deactivated${NC}"
                            else
                                echo -e "${RED}Failed to deactivate workflows${NC}"
                                exit 1
                            fi
                        else
                            echo -e "${BLUE}Deactivating workflow $4...${NC}"
                            if $DOCKER_COMPOSE exec -T n8n n8n update:workflow --id="$4" --active=false 2>/dev/null; then
                                echo -e "${GREEN}Workflow $4 deactivated${NC}"
                            else
                                echo -e "${RED}Failed to deactivate workflow $4${NC}"
                                exit 1
                            fi
                        fi
                        ;;
                    execute)
                        if [ -z "$4" ]; then
                            echo "Usage: ./dev n8n workflows execute <workflow-id> [json-data]"
                            echo ""
                            echo "Execute a specific workflow by ID"
                            echo "Get workflow IDs with: ./dev n8n workflows list"
                            echo ""
                            echo "Examples:"
                            echo "  ./dev n8n workflows execute abc123"
                            echo "  ./dev n8n workflows execute abc123 '{\"test\": true}'"
                            exit 1
                        fi
                        
                        echo -e "${BLUE}Executing workflow $4...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Use our custom execution helper
                        data="${5:-{}}"
                        $DOCKER_COMPOSE exec -T n8n n8n-exec trigger "$4" "$data"
                        ;;
                    *)
                        echo "Usage: ./dev n8n workflows {list|import|export|reset|activate|deactivate|execute}"
                        echo ""
                        echo "Commands:"
                        echo "  list           - List all workflows in n8n"
                        echo "  import         - Import workflows from workflow_json/"
                        echo "  export         - Export all workflows to a timestamped directory"
                        echo "  reset          - Clear all workflows and reimport from workflow_json/"
                        echo "  activate       - Activate all workflows"
                        echo "  deactivate [id] - Deactivate all workflows or specific one"
                        echo "  execute <id>   - Execute a specific workflow"
                        ;;
                esac
                ;;
            nodes)
                case "$3" in
                    list)
                        echo -e "${BLUE}Listing n8n custom nodes...${NC}"
                        echo ""
                        echo "Installed custom nodes:"
                        for node_dir in n8n/custom-nodes/n8n-nodes-*; do
                            if [ -d "$node_dir" ]; then
                                node_name=$(basename "$node_dir")
                                if [ -f "$node_dir/package.json" ]; then
                                    version=$(grep '"version"' "$node_dir/package.json" | head -1 | cut -d'"' -f4)
                                    echo "  • $node_name (v$version)"
                                    
                                    # Check if built
                                    if [ -d "$node_dir/dist" ]; then
                                        echo "    Status: Built ✓"
                                    else
                                        echo "    Status: Not built ✗"
                                    fi
                                fi
                            fi
                        done
                        ;;
                    build)
                        echo -e "${BLUE}Building n8n custom nodes...${NC}"
                        
                        failed=0
                        for node_dir in n8n/custom-nodes/n8n-nodes-*; do
                            if [ -d "$node_dir" ] && [ -f "$node_dir/package.json" ]; then
                                node_name=$(basename "$node_dir")
                                echo -n "  • Building $node_name... "
                                
                                cd "$node_dir"
                                if npm install --silent 2>/dev/null && npm run build --silent 2>/dev/null; then
                                    echo -e "${GREEN}✓${NC}"
                                else
                                    echo -e "${RED}✗${NC}"
                                    failed=$((failed + 1))
                                fi
                                cd - > /dev/null
                            fi
                        done
                        
                        if [ $failed -eq 0 ]; then
                            echo -e "${GREEN}All nodes built successfully${NC}"
                            echo "Rebuild n8n container to use updated nodes: ./dev rebuild n8n"
                        else
                            echo -e "${YELLOW}$failed node(s) failed to build${NC}"
                        fi
                        ;;
                    verify)
                        echo -e "${BLUE}Verifying n8n custom nodes...${NC}"
                        
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo "Checking custom nodes in container..."
                        
                        # Check if custom nodes directory exists in container
                        if $DOCKER_COMPOSE exec -T n8n test -d /data/.n8n/custom 2>/dev/null; then
                            echo -e "${GREEN}✓${NC} Custom nodes directory exists"
                            
                            # List nodes in container
                            echo ""
                            echo "Nodes in container:"
                            $DOCKER_COMPOSE exec -T n8n ls -la /data/.n8n/custom/ 2>/dev/null | grep "^d" | awk '{print "  • " $NF}'
                        else
                            echo -e "${RED}✗${NC} Custom nodes directory not found"
                        fi
                        
                        # Check if nodes are loading properly
                        echo ""
                        echo "Checking n8n logs for node loading errors..."
                        if $DOCKER_COMPOSE logs n8n 2>&1 | tail -50 | grep -i "error.*loading\|failed.*load" > /dev/null; then
                            echo -e "${YELLOW}⚠ Found node loading errors in logs. Check: ./dev logs n8n${NC}"
                        else
                            echo -e "${GREEN}✓ No node loading errors found${NC}"
                        fi
                        ;;
                    *)
                        echo "Usage: ./dev n8n nodes {list|build|verify}"
                        echo ""
                        echo "Commands:"
                        echo "  list    - List all custom nodes and their status"
                        echo "  build   - Build all custom nodes"
                        echo "  verify  - Verify nodes are properly installed in container"
                        ;;
                esac
                ;;
            cli)
                # Pass-through to n8n CLI
                shift 2
                
                # Check if any arguments provided
                if [ $# -eq 0 ]; then
                    echo "Usage: ./dev n8n cli <command> [options]"
                    echo ""
                    echo "Pass commands directly to the n8n CLI"
                    echo ""
                    echo "Examples:"
                    echo "  ./dev n8n cli --version              # Get n8n version"
                    echo "  ./dev n8n cli --help                 # Get n8n help"
                    echo "  ./dev n8n cli list:workflow --help   # Get help for specific command"
                    echo ""
                    echo "Note: Avoid 'start' or 'webhook' commands which conflict with running instance"
                    exit 1
                fi
                
                if ! check_service_running "n8n"; then
                    exit $EXIT_SERVICE_UNAVAILABLE
                fi
                
                echo -e "${BLUE}Executing n8n CLI command...${NC}"
                $DOCKER_COMPOSE exec -T n8n n8n "$@"
                ;;
            credentials)
                case "$3" in
                    export)
                        echo -e "${BLUE}Exporting n8n credentials...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        export_dir="credentials_export_$(date +%Y%m%d_%H%M%S)"
                        mkdir -p "$export_dir"
                        echo "Exporting credentials to $export_dir/"
                        
                        if $DOCKER_COMPOSE exec -T n8n n8n export:credentials --all --separate --output="/tmp/cred_export/" 2>&1 | grep -v "Error tracking disabled"; then
                            docker cp "$($DOCKER_COMPOSE ps -q n8n):/tmp/cred_export/" "$export_dir/" 2>/dev/null
                            $DOCKER_COMPOSE exec -T n8n rm -rf "/tmp/cred_export/" 2>/dev/null
                            echo -e "${GREEN}Credentials exported to $export_dir/${NC}"
                        else
                            echo -e "${RED}Failed to export credentials${NC}"
                            rmdir "$export_dir"
                            exit 1
                        fi
                        ;;
                    import)
                        if [ -z "$4" ]; then
                            echo "Usage: ./dev n8n credentials import <file-or-directory>"
                            echo ""
                            echo "Import credentials from a JSON file or directory"
                            exit 1
                        fi
                        
                        echo -e "${BLUE}Importing n8n credentials...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        import_path="$4"
                        
                        if [ ! -e "$import_path" ]; then
                            echo -e "${RED}File or directory not found: $import_path${NC}"
                            exit 1
                        fi
                        
                        container_path="/tmp/cred_import_$(date +%s)"
                        docker cp "$import_path" "$($DOCKER_COMPOSE ps -q n8n):$container_path"
                        
                        if [ -d "$import_path" ]; then
                            echo "Importing from directory..."
                            import_flags="--separate --input=$container_path"
                        else
                            echo "Importing from file..."
                            import_flags="--input=$container_path"
                        fi
                        
                        if $DOCKER_COMPOSE exec -T n8n n8n import:credentials $import_flags 2>/dev/null; then
                            echo -e "${GREEN}Credentials imported successfully${NC}"
                        else
                            echo -e "${RED}Failed to import credentials${NC}"
                            exit 1
                        fi
                        
                        $DOCKER_COMPOSE exec -T n8n rm -rf "$container_path" 2>/dev/null
                        ;;
                    backup)
                        echo -e "${BLUE}Backing up n8n credentials (encrypted)...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        backup_file="credentials_backup_$(date +%Y%m%d_%H%M%S).json"
                        
                        if $DOCKER_COMPOSE exec -T n8n n8n export:credentials --all --output="/tmp/$backup_file" 2>/dev/null; then
                            docker cp "$($DOCKER_COMPOSE ps -q n8n):/tmp/$backup_file" "$backup_file" 2>/dev/null
                            $DOCKER_COMPOSE exec -T n8n rm -f "/tmp/$backup_file" 2>/dev/null
                            echo -e "${GREEN}Credentials backed up to $backup_file${NC}"
                            echo -e "${YELLOW}Note: Credentials are encrypted with your n8n instance key${NC}"
                        else
                            echo -e "${RED}Failed to backup credentials${NC}"
                            exit 1
                        fi
                        ;;
                    *)
                        echo "Usage: ./dev n8n credentials {export|import|backup}"
                        echo ""
                        echo "Commands:"
                        echo "  export       - Export all credentials to separate files"
                        echo "  import <path> - Import credentials from file or directory"
                        echo "  backup       - Create encrypted backup of all credentials"
                        echo ""
                        echo "Note: Credentials contain sensitive data. Handle exports carefully."
                        ;;
                esac
                ;;
            executions)
                case "$3" in
                    list)
                        echo -e "${BLUE}Listing recent n8n executions...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # List executions using n8n CLI
                        $DOCKER_COMPOSE exec -T n8n n8n list:execution --limit=10 2>/dev/null || {
                            echo -e "${YELLOW}No executions found or n8n is still starting${NC}"
                        }
                        ;;
                    *)
                        echo "Usage: ./dev n8n executions {list}"
                        echo ""
                        echo "Commands:"
                        echo "  list - List recent workflow executions"
                        ;;
                esac
                ;;
            env)
                case "$3" in
                    list)
                        echo -e "${BLUE}Listing environment variables in n8n container...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        echo "Current n8n environment variables:"
                        $DOCKER_COMPOSE exec -T n8n env | sort | grep -E "^(N8N_|DB_|POSTGRES_|REDIS_|SMTP_|COURT_|NEXT_)" || {
                            echo "Standard environment only:"
                            $DOCKER_COMPOSE exec -T n8n env | sort | grep "^N8N_"
                        }
                        ;;
                    inject)
                        echo -e "${BLUE}Injecting .env variables into n8n container...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Create a script to export env vars
                        if [ -f .env ]; then
                            echo -e "${YELLOW}Note: Environment variables injected this way are temporary.${NC}"
                            echo -e "${YELLOW}For permanent changes, update docker-compose.yml and rebuild.${NC}"
                            echo ""
                            
                            # Read .env and export to container
                            while IFS='=' read -r key value; do
                                # Skip comments and empty lines
                                [[ "$key" =~ ^#.*$ ]] && continue
                                [[ -z "$key" ]] && continue
                                
                                # Export to container (note: this is temporary and won't persist)
                                echo "Exporting $key"
                                $DOCKER_COMPOSE exec -T n8n sh -c "export $key='$value'" 2>/dev/null
                            done < .env
                            
                            echo -e "${GREEN}Environment variables injected (temporary)${NC}"
                            echo ""
                            echo "To make permanent, add to docker-compose.yml under n8n service:"
                            echo "  environment:"
                            grep -E "^(DB_|POSTGRES_|REDIS_|SMTP_|COURT_)" .env | while IFS='=' read -r key value; do
                                echo "    - $key=\${$key}"
                            done | head -10
                            if [ $(grep -E "^(DB_|POSTGRES_|REDIS_|SMTP_|COURT_)" .env | wc -l) -gt 10 ]; then
                                echo "    ... and more"
                            fi
                        else
                            echo -e "${RED}No .env file found${NC}"
                            exit 1
                        fi
                        ;;
                    *)
                        echo "Usage: ./dev n8n env {list|inject}"
                        echo ""
                        echo "Commands:"
                        echo "  list   - List environment variables in n8n container"
                        echo "  inject - Inject .env variables into n8n (temporary)"
                        echo ""
                        echo "Note: For permanent env var changes, modify docker-compose.yml"
                        ;;
                esac
                ;;
            test)
                case "$3" in
                    webhook)
                        echo -e "${BLUE}Testing n8n webhook...${NC}"
                        
                        webhook_id="${N8N_WEBHOOK_ID:-c188c31c-1c45-4118-9ece-5b6057ab5177}"
                        port="${N8N_PORT:-8100}"
                        
                        echo "Sending test payload to webhook..."
                        echo ""
                        
                        # Create test payload
                        payload='{
                            "test": true,
                            "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                            "source": "dev-cli",
                            "message": "Test webhook trigger from dev CLI"
                        }'
                        
                        # Send webhook request
                        response=$(curl -s -X POST "http://localhost:$port/webhook/$webhook_id" \
                            -H 'Content-Type: application/json' \
                            -d "$payload" 2>&1)
                        
                        if [ $? -eq 0 ]; then
                            echo -e "${GREEN}✓ Webhook request sent successfully${NC}"
                            echo ""
                            echo "Response:"
                            echo "$response" | head -20
                            
                            if echo "$response" | grep -q "Workflow Webhook Error"; then
                                echo ""
                                echo -e "${YELLOW}Note: Webhook received but workflow may have errors${NC}"
                                echo "Check workflow configuration in n8n UI"
                            fi
                        else
                            echo -e "${RED}✗ Failed to send webhook request${NC}"
                            echo "Check if n8n is running: ./dev status n8n"
                        fi
                        ;;
                    *)
                        echo "Usage: ./dev n8n test {webhook}"
                        echo ""
                        echo "Commands:"
                        echo "  webhook - Send test payload to configured webhook"
                        ;;
                esac
                ;;
            monitor)
                case "$3" in
                    logs)
                        echo -e "${BLUE}Monitoring n8n logs (Ctrl+C to stop)...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Tail logs with optional filter
                        if [ -n "$4" ]; then
                            echo "Filtering for: $4"
                            $DOCKER_COMPOSE logs -f n8n 2>&1 | grep --line-buffered -i "$4"
                        else
                            $DOCKER_COMPOSE logs -f n8n 2>&1
                        fi
                        ;;
                    webhooks)
                        echo -e "${BLUE}Monitoring webhook activity...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo "Watching for webhook calls (Ctrl+C to stop):"
                        echo ""
                        # Monitor n8n logs for webhook activity
                        $DOCKER_COMPOSE logs -f n8n 2>&1 | grep --line-buffered -E "webhook|Webhook|/webhook/" | while read line; do
                            echo "[$(date '+%H:%M:%S')] $line"
                        done
                        ;;
                    executions)
                        echo -e "${BLUE}Monitoring workflow executions...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo "Real-time execution monitoring (Ctrl+C to stop):"
                        echo ""
                        
                        # Use our execution helper for real-time monitoring
                        $DOCKER_COMPOSE exec -T n8n sh -c "while true; do clear; echo '=== n8n Execution Monitor ==='; echo ''; n8n-exec query last 10; echo ''; echo '=== Currently Running ==='; n8n-exec query running; sleep 2; done"
                        ;;
                    errors)
                        echo -e "${BLUE}Monitoring n8n errors...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo "Watching for errors (Ctrl+C to stop):"
                        echo ""
                        $DOCKER_COMPOSE logs -f n8n 2>&1 | grep --line-buffered -iE "error|fail|exception|warn" | while read line; do
                            if echo "$line" | grep -qi "error\|fail\|exception"; then
                                echo -e "[$(date '+%H:%M:%S')] ${RED}✗${NC} $line"
                            else
                                echo -e "[$(date '+%H:%M:%S')] ${YELLOW}⚠${NC} $line"
                            fi
                        done
                        ;;
                    *)
                        echo "Usage: ./dev n8n monitor {logs|webhooks|executions|errors} [filter]"
                        echo ""
                        echo "Commands:"
                        echo "  logs       - Monitor all n8n logs (optional filter)"
                        echo "  webhooks   - Monitor webhook activity"
                        echo "  executions - Monitor workflow executions"
                        echo "  errors     - Monitor errors and warnings"
                        echo ""
                        echo "Examples:"
                        echo "  ./dev n8n monitor logs                # All logs"
                        echo "  ./dev n8n monitor logs 'webhook'      # Filtered logs"
                        echo "  ./dev n8n monitor executions          # Execution activity"
                        echo "  ./dev n8n monitor errors              # Errors only"
                        echo ""
                        echo "Press Ctrl+C to stop monitoring"
                        ;;
                esac
                ;;
            query)
                case "$3" in
                    status)
                        if [ "$OUTPUT_FORMAT" != "json" ]; then
                            echo -e "${BLUE}Querying n8n status...${NC}"
                        fi
                        if ! check_service_running "n8n" "true"; then
                            if [ "$OUTPUT_FORMAT" = "json" ]; then
                                echo '{"status":"error","service":"n8n","message":"Service is not running"}'
                            else
                                echo -e "${RED}✗ n8n is not running${NC}"
                            fi
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Check health endpoint
                        health_status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${N8N_PORT:-8100}/healthz")
                        if echo "$health_status" | grep -q "200"; then
                            health_ok=true
                        else
                            health_ok=false
                        fi
                        
                        if [ "$OUTPUT_FORMAT" = "json" ]; then
                            echo "{\"status\":\"success\",\"service\":\"n8n\",\"running\":true,\"health\":$health_ok}"
                        else
                            echo -e "${GREEN}✓ n8n is running${NC}"
                            echo ""
                            if [ "$health_ok" = true ]; then
                                echo -e "${GREEN}✓ Health check: OK${NC}"
                            else
                                echo -e "${RED}✗ Health check: Failed${NC}"
                            fi
                        fi
                        
                        if [ "$OUTPUT_FORMAT" != "json" ]; then
                            # Get version
                            echo ""
                            echo -n "Version: "
                            $DOCKER_COMPOSE exec -T n8n n8n --version 2>/dev/null || echo "Unknown"
                            
                            # Count workflows
                            echo ""
                            workflow_count=$($DOCKER_COMPOSE exec -T n8n n8n list:workflow 2>/dev/null | grep -c "|" || echo 0)
                            echo "Active workflows: $workflow_count"
                            
                            # Check custom nodes
                            echo ""
                            if $DOCKER_COMPOSE exec -T n8n test -d /data/.n8n/custom 2>/dev/null; then
                                node_count=$($DOCKER_COMPOSE exec -T n8n ls /data/.n8n/custom/ 2>/dev/null | wc -l || echo 0)
                                echo "Custom nodes installed: $node_count"
                            else
                                echo "Custom nodes: None"
                            fi
                        fi
                        ;;
                    webhook-url)
                        echo -e "${BLUE}n8n Webhook URLs:${NC}"
                        echo ""
                        
                        # Get from environment
                        webhook_id="${N8N_WEBHOOK_ID:-c188c31c-1c45-4118-9ece-5b6057ab5177}"
                        port="${N8N_PORT:-8100}"
                        
                        echo "Production webhook URL:"
                        echo "  http://localhost:$port/webhook/$webhook_id"
                        echo ""
                        echo "Test webhook URL:"
                        echo "  http://localhost:$port/webhook-test/$webhook_id"
                        echo ""
                        echo "Internal (container) URL:"
                        echo "  http://n8n:5678/webhook/$webhook_id"
                        echo ""
                        echo "To test webhook:"
                        echo "  curl -X POST http://localhost:$port/webhook/$webhook_id \\"
                        echo "    -H 'Content-Type: application/json' \\"
                        echo "    -d '{\"test\": \"data\"}'"
                        ;;
                    last-execution)
                        echo -e "${BLUE}Querying last execution details...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        # Query SQLite database directly
                        $DOCKER_COMPOSE exec -T n8n sqlite3 -header -column /data/.n8n/database.sqlite \
                            "SELECT id, workflowId, status, datetime(startedAt/1000, 'unixepoch') as started 
                             FROM execution_entity 
                             ORDER BY startedAt DESC 
                             LIMIT ${4:-5}" 2>/dev/null || echo "No executions found"
                        ;;
                    active-workflows)
                        echo -e "${BLUE}Querying active workflows...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        echo "Active workflows:"
                        $DOCKER_COMPOSE exec -T n8n n8n list:workflow 2>&1 | grep -v "User settings\|Error tracking" | while IFS='|' read -r id name; do
                            if [ ! -z "$id" ] && [ "$id" != "ID" ]; then
                                # Trim whitespace
                                id=$(echo "$id" | xargs)
                                name=$(echo "$name" | xargs)
                                
                                # Try to get workflow details using n8n CLI
                                echo ""
                                echo "  ID: $id"
                                echo "  Name: $name"
                                
                                # Check if workflow is active by trying to get its status from database
                                if $DOCKER_COMPOSE exec -T n8n test -f /data/.n8n/database.sqlite 2>/dev/null; then
                                    active=$($DOCKER_COMPOSE exec -T n8n sqlite3 /data/.n8n/database.sqlite \
                                        "SELECT active FROM workflow_entity WHERE id = '$id';" 2>/dev/null)
                                    if [ "$active" = "1" ]; then
                                        echo -e "  Status: ${GREEN}Active${NC}"
                                    else
                                        echo -e "  Status: ${YELLOW}Inactive${NC}"
                                    fi
                                fi
                            fi
                        done
                        ;;
                    running-executions)
                        echo -e "${BLUE}Querying running executions...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        $DOCKER_COMPOSE exec -T n8n sqlite3 -header -column /data/.n8n/database.sqlite \
                            "SELECT id, workflowId, datetime(startedAt/1000, 'unixepoch') as started 
                             FROM execution_entity 
                             WHERE finished = 0 
                             ORDER BY startedAt DESC" 2>/dev/null || echo "No running executions"
                        ;;
                    failed-executions)
                        echo -e "${BLUE}Querying failed executions...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        $DOCKER_COMPOSE exec -T n8n sqlite3 -header -column /data/.n8n/database.sqlite \
                            "SELECT id, workflowId, status, datetime(startedAt/1000, 'unixepoch') as started 
                             FROM execution_entity 
                             WHERE status = 'failed' OR status = 'crashed' 
                             ORDER BY startedAt DESC 
                             LIMIT ${4:-10}" 2>/dev/null || echo "No failed executions"
                        ;;
                    execution-stats)
                        if [ "$OUTPUT_FORMAT" != "json" ]; then
                            echo -e "${BLUE}Querying execution statistics...${NC}"
                        fi
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        # Get statistics
                        total=$($DOCKER_COMPOSE exec -T n8n sqlite3 /data/.n8n/database.sqlite \
                            "SELECT COUNT(*) FROM execution_entity" 2>/dev/null || echo "0")
                        successful=$($DOCKER_COMPOSE exec -T n8n sqlite3 /data/.n8n/database.sqlite \
                            "SELECT COUNT(*) FROM execution_entity WHERE status = 'success'" 2>/dev/null || echo "0")
                        failed=$($DOCKER_COMPOSE exec -T n8n sqlite3 /data/.n8n/database.sqlite \
                            "SELECT COUNT(*) FROM execution_entity WHERE status = 'failed' OR status = 'crashed'" 2>/dev/null || echo "0")
                        
                        if [ "$OUTPUT_FORMAT" = "json" ]; then
                            echo "{\"total\":$total,\"successful\":$successful,\"failed\":$failed}"
                        else
                            echo ""
                            echo "Total Executions: $total"
                            echo "Successful: $successful"
                            echo "Failed: $failed"
                        fi
                        ;;
                    execution-details)
                        if [ -z "$4" ]; then
                            echo "Usage: ./dev n8n query execution-details <execution-id>"
                            exit 1
                        fi
                        
                        echo -e "${BLUE}Querying execution details for $4...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        $DOCKER_COMPOSE exec -T n8n sqlite3 -header -column /data/.n8n/database.sqlite \
                            "SELECT id, workflowId, status, mode, 
                                    datetime(startedAt/1000, 'unixepoch') as started,
                                    datetime(stoppedAt/1000, 'unixepoch') as stopped
                             FROM execution_entity 
                             WHERE id = '$4'" 2>/dev/null || echo "Execution not found"
                        ;;
                    workflow-info)
                        echo -e "${BLUE}Querying workflow information...${NC}"
                        if ! check_service_running "n8n"; then
                            exit $EXIT_SERVICE_UNAVAILABLE
                        fi
                        
                        echo ""
                        if [ -z "$4" ]; then
                            $DOCKER_COMPOSE exec -T n8n sqlite3 -header -column /data/.n8n/database.sqlite \
                                "SELECT id, name, active FROM workflow_entity ORDER BY name" 2>/dev/null || echo "No workflows found"
                        else
                            $DOCKER_COMPOSE exec -T n8n sqlite3 -header -column /data/.n8n/database.sqlite \
                                "SELECT id, name, active FROM workflow_entity WHERE id = '$4'" 2>/dev/null || echo "Workflow not found"
                        fi
                        ;;
                    api-status)
                        echo -e "${BLUE}Checking n8n API status...${NC}"
                        port="${N8N_PORT:-8100}"
                        
                        echo ""
                        echo "API Endpoints:"
                        
                        # Check main API
                        echo -n "  REST API: "
                        if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$port/rest/workflows" | grep -q "401\|403"; then
                            echo -e "${YELLOW}Protected (authentication required)${NC}"
                        elif curl -s -o /dev/null -w "%{http_code}" "http://localhost:$port/rest/workflows" | grep -q "200"; then
                            echo -e "${GREEN}Open (no authentication)${NC}"
                        else
                            echo -e "${RED}Not accessible${NC}"
                        fi
                        
                        # Check public API
                        echo -n "  Public API: "
                        if curl -s "http://localhost:$port/api/v1" 2>&1 | grep -q "Cannot GET"; then
                            echo -e "${RED}Disabled${NC}"
                        else
                            echo -e "${GREEN}Enabled${NC}"
                        fi
                        
                        # Check Swagger UI
                        echo -n "  Swagger UI: "
                        if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$port/api/v1/docs/" | grep -q "200"; then
                            echo -e "${GREEN}Available at http://localhost:$port/api/v1/docs/${NC}"
                        else
                            echo -e "${YELLOW}Not available${NC}"
                        fi
                        
                        echo ""
                        echo "To enable API access, set in docker-compose.yml:"
                        echo "  N8N_PUBLIC_API_DISABLED=false"
                        echo "  N8N_PUBLIC_API_SWAGGERUI_DISABLED=false"
                        ;;
                    *)
                        echo "Usage: ./dev n8n query {status|webhook-url|last-execution|running-executions|failed-executions|execution-stats|execution-details|workflow-info|active-workflows|api-status}"
                        echo ""
                        echo "Commands:"
                        echo "  status              - Query n8n service status and stats"
                        echo "  webhook-url         - Display webhook URLs for testing"
                        echo "  last-execution [n]  - Show details of last n executions (default: 5)"
                        echo "  running-executions  - Show currently running executions"
                        echo "  failed-executions   - Show failed executions"
                        echo "  execution-stats     - Display execution statistics"
                        echo "  execution-details   - Get details of specific execution"
                        echo "  workflow-info [id]  - Get workflow information"
                        echo "  active-workflows    - List active workflows with status"
                        echo "  api-status          - Check API endpoint availability"
                        echo ""
                        echo "Examples:"
                        echo "  ./dev n8n query last-execution 10"
                        echo "  ./dev n8n query execution-details abc123"
                        echo "  ./dev n8n query workflow-info"
                        ;;
                esac
                ;;
            *)
                echo "Usage: ./dev n8n {setup|workflows|nodes|cli|credentials|executions|env|test|monitor|query} [command]"
                echo ""
                echo "Subcommands:"
                echo "  setup       - Auto-setup n8n owner account and activate workflows"
                echo "  workflows   - Manage workflows (list, import, export, execute, activate/deactivate)"
                echo "  nodes       - Manage custom nodes (list, build, verify)"
                echo "  credentials - Manage credentials (export, import, backup)"
                echo "  executions  - View workflow executions"
                echo "  env         - Manage environment variables"
                echo "  test        - Test n8n functionality (webhooks)"
                echo "  monitor     - Continuous monitoring (logs, webhooks, executions, errors)"
                echo "  query       - Query n8n status and configuration"
                echo "  cli         - Pass commands directly to n8n CLI"
                echo ""
                echo "Examples:"
                echo "  ./dev n8n workflows list             # List all workflows"
                echo "  ./dev n8n env list                   # List container env vars"
                echo "  ./dev n8n monitor executions         # Watch workflow executions"
                echo "  ./dev n8n query status               # Check n8n status"
                echo "  ./dev n8n credentials backup          # Backup all credentials"
                ;;
        esac
        ;;
        
    seed-users)
        check_requirements
        
        # Load database credentials from .env file
        if [ -f .env ]; then
            DB_USER=$(grep "^DB_USER=" .env | cut -d= -f2-)
            DB_PASSWORD=$(grep "^DB_PASSWORD=" .env | cut -d= -f2-)
            DB_NAME=$(grep "^DB_NAME=" .env | cut -d= -f2-)
            POSTGRES_PORT=$(grep "^POSTGRES_PORT=" .env | cut -d= -f2-)
        fi
        
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Seeding Lawyer-Chat Demo Users${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Check if database is running
        if ! check_db_ready; then
            exit $EXIT_SERVICE_UNAVAILABLE
        fi
        
        # Check if User table exists
        USER_TABLE_EXISTS=$($DOCKER_COMPOSE exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -t -c \
            "SELECT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'User');" 2>/dev/null | tr -d ' ')
        
        if [ "$USER_TABLE_EXISTS" = "f" ] || [ "$USER_TABLE_EXISTS" = "false" ]; then
            echo -e "${BLUE}Creating database schema...${NC}"
            
            if [ -d "services/lawyer-chat" ]; then
                cd services/lawyer-chat
                # URL-encode the password to handle special characters
                ENCODED_PASSWORD=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${DB_PASSWORD}'))" 2>/dev/null || echo "${DB_PASSWORD}")
                export DATABASE_URL="postgresql://${DB_USER:-aletheia}:${ENCODED_PASSWORD}@localhost:${POSTGRES_PORT:-8200}/${DB_NAME:-aletheia}"
                
                # Push schema to database
                if npx prisma db push --force-reset --skip-generate &>/dev/null 2>&1; then
                    echo -e "${GREEN}✓ Database schema created${NC}"
                    
                    # Generate Prisma client
                    if npx prisma generate &>/dev/null 2>&1; then
                        echo -e "${GREEN}✓ Prisma client generated${NC}"
                    else
                        echo -e "${YELLOW}⚠ Failed to generate Prisma client${NC}"
                    fi
                else
                    echo -e "${RED}✗ Failed to create database schema${NC}"
                    cd - &>/dev/null
                    exit 1
                fi
                
                cd - &>/dev/null
            else
                echo -e "${RED}✗ Lawyer-chat service directory not found${NC}"
                exit 1
            fi
        else
            echo -e "${GREEN}✓ Database schema already exists${NC}"
        fi
        
        # Seed users
        echo -e "${BLUE}Seeding demo users...${NC}"
        
        if [ -d "services/lawyer-chat" ]; then
            cd services/lawyer-chat
            # URL-encode the password to handle special characters
            ENCODED_PASSWORD=$(python3 -c "import urllib.parse; import sys; print(urllib.parse.quote(sys.argv[1]))" "${DB_PASSWORD}" 2>/dev/null || echo "${DB_PASSWORD}")
            export DATABASE_URL="postgresql://${DB_USER:-aletheia}:${ENCODED_PASSWORD}@localhost:${POSTGRES_PORT:-8200}/${DB_NAME:-aletheia}"
            
            # Ensure Prisma client is generated
            if [ ! -d "node_modules/@prisma/client" ]; then
                echo -e "${BLUE}Generating Prisma client...${NC}"
                npx prisma generate &>/dev/null 2>&1
            fi
            
            if [ -f "scripts/seed-users.cjs" ]; then
                if node scripts/seed-users.cjs 2>&1; then
                    echo -e "${GREEN}✓ Demo users created successfully:${NC}"
                    echo ""
                    echo "  ${CYAN}Demo User:${NC}"
                    echo "    Email: demo@reichmanjorgensen.com"
                    echo "    Password: demo123"
                    echo ""
                    echo "  ${CYAN}Admin User:${NC}"
                    echo "    Email: admin@reichmanjorgensen.com"
                    echo "    Password: admin123"
                else
                    echo -e "${RED}✗ Failed to seed users${NC}"
                    cd - &>/dev/null
                    exit 1
                fi
            elif [ -f "prisma/seed.ts" ]; then
                if npx tsx prisma/seed.ts 2>&1; then
                    echo -e "${GREEN}✓ Demo users created successfully:${NC}"
                    echo ""
                    echo "  ${CYAN}Demo User:${NC}"
                    echo "    Email: demo@reichmanjorgensen.com"
                    echo "    Password: demo123"
                    echo ""
                    echo "  ${CYAN}Admin User:${NC}"
                    echo "    Email: admin@reichmanjorgensen.com"
                    echo "    Password: admin123"
                else
                    echo -e "${RED}✗ Failed to seed users${NC}"
                    cd - &>/dev/null
                    exit 1
                fi
            else
                echo -e "${RED}✗ No seed script found${NC}"
                cd - &>/dev/null
                exit 1
            fi
            
            cd - &>/dev/null
        else
            echo -e "${RED}✗ Lawyer-chat service directory not found${NC}"
            exit 1
        fi
        
        echo ""
        echo -e "${GREEN}✓ User seeding complete!${NC}"
        echo ""
        echo "You can now log into lawyer-chat at: http://localhost:${WEB_PORT:-8080}"
        ;;
        
    doctor)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Comprehensive System Diagnostics${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        issues=0
        warnings=0
        
        # 1. Check Docker
        echo -e "${CYAN}1. Docker Environment:${NC}"
        if ! command -v docker &> /dev/null; then
            echo -e "${RED}✗${NC} Docker not installed"
            echo -e "  ${YELLOW}→ Install from: https://www.docker.com/products/docker-desktop${NC}"
            ((issues++))
        else
            echo -e "${GREEN}✓${NC} Docker installed ($(docker --version 2>/dev/null | cut -d' ' -f3 | tr -d ','))"
            
            if ! docker info &> /dev/null; then
                echo -e "${RED}✗${NC} Docker daemon not running"
                echo -e "  ${YELLOW}→ Start Docker Desktop application${NC}"
                ((issues++))
            else
                echo -e "${GREEN}✓${NC} Docker daemon running"
                
                # Check Docker resources
                mem_limit=$(docker info 2>/dev/null | grep "Total Memory" | awk '{print $3}')
                if [ -n "$mem_limit" ]; then
                    echo -e "${GREEN}✓${NC} Docker memory: $mem_limit"
                fi
            fi
        fi
        
        if ! command -v $DOCKER_COMPOSE &> /dev/null; then
            echo -e "${RED}✗${NC} $DOCKER_COMPOSE not installed"
            ((issues++))
        else
            echo -e "${GREEN}✓${NC} $DOCKER_COMPOSE installed ($($DOCKER_COMPOSE --version 2>/dev/null | cut -d' ' -f4 | tr -d ','))"
        fi
        echo ""
        
        # 2. Check Configuration
        echo -e "${CYAN}2. Configuration:${NC}"
        if [ ! -f .env ]; then
            echo -e "${RED}✗${NC} No .env file found"
            echo -e "  ${YELLOW}→ Run './dev setup' to create one${NC}"
            ((issues++))
        else
            echo -e "${GREEN}✓${NC} .env file exists"
            
            # Check for default passwords
            if grep -q "CHANGE_ME" .env 2>/dev/null; then
                echo -e "${RED}✗${NC} Found CHANGE_ME placeholders in .env"
                echo -e "  ${YELLOW}→ Update all CHANGE_ME values with secure passwords${NC}"
                ((issues++))
            fi
            
            if grep -q "aletheia123" .env 2>/dev/null; then
                echo -e "${YELLOW}⚠${NC} Weak default password detected"
                echo -e "  ${YELLOW}→ Update DB_PASSWORD with a secure password${NC}"
                ((warnings++))
            fi
            
            # Check required variables
            source .env 2>/dev/null
            missing=0
            for var in DB_USER DB_PASSWORD DB_NAME N8N_ENCRYPTION_KEY NEXTAUTH_SECRET; do
                if [ -z "${!var}" ]; then
                    echo -e "${RED}✗${NC} Missing required: $var"
                    ((missing++))
                fi
            done
            
            if [ $missing -eq 0 ]; then
                echo -e "${GREEN}✓${NC} All required variables set"
            else
                ((issues++))
            fi
        fi
        echo ""
        
        # 3. Check Ports
        echo -e "${CYAN}3. Port Availability:${NC}"
        port_issues=0
        for port_var in WEB_PORT N8N_PORT AI_PORTAL_PORT COURT_PROCESSOR_PORT POSTGRES_PORT REDIS_PORT; do
            port=${!port_var}
            if [ -z "$port" ]; then
                # Use defaults if not set
                case $port_var in
                    WEB_PORT) port=8080 ;;
                    N8N_PORT) port=8100 ;;
                    AI_PORTAL_PORT) port=8102 ;;
                    COURT_PROCESSOR_PORT) port=8104 ;;
                    POSTGRES_PORT) port=8200 ;;
                    REDIS_PORT) port=8201 ;;
                esac
            fi
            
            if lsof -i :$port &> /dev/null || netstat -an 2>/dev/null | grep -q ":$port.*LISTEN"; then
                echo -e "${RED}✗${NC} Port $port ($port_var) already in use"
                ((port_issues++))
            else
                echo -e "${GREEN}✓${NC} Port $port ($port_var) available"
            fi
        done
        
        if [ $port_issues -gt 0 ]; then
            echo -e "  ${YELLOW}→ Change port numbers in .env or stop conflicting services${NC}"
            ((warnings++))
        fi
        echo ""
        
        # 4. Check Services (if Docker is running)
        if docker info &> /dev/null; then
            echo -e "${CYAN}4. Service Status:${NC}"
            running=$($DOCKER_COMPOSE ps --services --filter "status=running" 2>/dev/null | wc -l | tr -d ' ')
            total=$($DOCKER_COMPOSE config --services 2>/dev/null | wc -l | tr -d ' ')
            
            if [ "$running" = "0" ]; then
                echo -e "${YELLOW}⚠${NC} No services running ($running/$total)"
                echo -e "  ${YELLOW}→ Run './dev up' to start services${NC}"
            else
                echo -e "${GREEN}✓${NC} Services running: $running/$total"
                
                # Check health status
                unhealthy=$($DOCKER_COMPOSE ps 2>/dev/null | grep -c "(unhealthy)" || echo "0")
                if [ "$unhealthy" -gt "0" ]; then
                    echo -e "${YELLOW}⚠${NC} $unhealthy service(s) unhealthy"
                    echo -e "  ${YELLOW}→ Run './dev health' for details${NC}"
                    ((warnings++))
                fi
            fi
        else
            echo -e "${CYAN}4. Service Status:${NC}"
            echo -e "${YELLOW}⚠${NC} Cannot check services (Docker not running)"
        fi
        echo ""
        
        # 5. System Resources
        echo -e "${CYAN}5. System Resources:${NC}"
        
        # Check disk space
        if command -v df &> /dev/null; then
            disk_usage=$(df -h . 2>/dev/null | awk 'NR==2 {print $5}' | tr -d '%')
            disk_avail=$(df -h . 2>/dev/null | awk 'NR==2 {print $4}')
            
            if [ -n "$disk_usage" ]; then
                if [ "$disk_usage" -gt 90 ]; then
                    echo -e "${RED}✗${NC} Low disk space ($disk_avail available)"
                    ((warnings++))
                else
                    echo -e "${GREEN}✓${NC} Disk space: $disk_avail available"
                fi
            fi
        fi
        
        # Check memory (macOS/Linux)
        if command -v free &> /dev/null; then
            # Linux
            mem_avail=$(free -h 2>/dev/null | awk '/^Mem:/ {print $7}')
            if [ -n "$mem_avail" ]; then
                echo -e "${GREEN}✓${NC} Memory available: $mem_avail"
            fi
        elif command -v vm_stat &> /dev/null; then
            # macOS
            pages_free=$(vm_stat 2>/dev/null | grep "Pages free" | awk '{print $3}' | tr -d '.')
            if [ -n "$pages_free" ]; then
                mem_free_mb=$((pages_free * 4096 / 1024 / 1024))
                echo -e "${GREEN}✓${NC} Memory available: ~${mem_free_mb}MB free"
            fi
        fi
        echo ""
        
        # Summary
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        if [ $issues -eq 0 ] && [ $warnings -eq 0 ]; then
            echo -e "${GREEN}✅ System ready! All checks passed.${NC}"
            echo ""
            echo "Next steps:"
            if [ "$running" = "0" ]; then
                echo "  1. Run './dev up' to start services"
            else
                echo "  1. Services are running"
            fi
            echo "  2. Access http://localhost:8080"
        elif [ $issues -gt 0 ]; then
            echo -e "${RED}❌ Found $issues critical issue(s) and $warnings warning(s)${NC}"
            echo ""
            echo "Please fix the critical issues above before proceeding."
        else
            echo -e "${YELLOW}⚠ Found $warnings warning(s)${NC}"
            echo ""
            echo "System is functional but review warnings above."
        fi
        ;;
        
    env)
        case "$2" in
            check)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Environment Configuration Check${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                if [ ! -f .env ]; then
                    echo -e "${RED}✗ No .env file found${NC}"
                    exit 1
                fi
                
                source .env
                
                # Required variables
                echo -e "${CYAN}Required Variables:${NC}"
                required_vars="DB_USER DB_PASSWORD DB_NAME N8N_ENCRYPTION_KEY NEXTAUTH_SECRET"
                missing=0
                
                for var in $required_vars; do
                    if [ -z "${!var}" ]; then
                        echo -e "${RED}✗${NC} $var is not set"
                        missing=$((missing + 1))
                    else
                        if [[ "$var" == *"PASSWORD"* ]] || [[ "$var" == *"SECRET"* ]] || [[ "$var" == *"KEY"* ]]; then
                            echo -e "${GREEN}✓${NC} $var is set (hidden)"
                        else
                            echo -e "${GREEN}✓${NC} $var = ${!var}"
                        fi
                    fi
                done
                
                # Optional variables
                echo ""
                echo -e "${CYAN}Port Configuration:${NC}"
                echo "  WEB_PORT = ${WEB_PORT:-8080}"
                echo "  N8N_PORT = ${N8N_PORT:-8100}"
                echo "  AI_PORTAL_PORT = ${AI_PORTAL_PORT:-8102}"
                echo "  POSTGRES_PORT = ${POSTGRES_PORT:-8200}"
                echo "  REDIS_PORT = ${REDIS_PORT:-8201}"
                
                # Check for default passwords
                echo ""
                echo -e "${CYAN}Security Check:${NC}"
                # Check for weak passwords
                if [[ "$DB_PASSWORD" =~ ^(password|123456|admin|default|aletheia123|postgres)$ ]]; then
                    echo -e "${YELLOW}⚠${NC}  DB_PASSWORD appears to be weak/default"
                else
                    echo -e "${GREEN}✓${NC} DB_PASSWORD appears strong"
                fi
                
                echo ""
                if [ $missing -eq 0 ]; then
                    echo -e "${GREEN}✅ All required variables are set${NC}"
                else
                    echo -e "${RED}✗ Missing $missing required variable(s)${NC}"
                fi
                ;;
                
            list)
                echo -e "${BLUE}Environment variables in use:${NC}"
                if [ -f .env ]; then
                    grep -E "^[A-Z]" .env | cut -d= -f1 | sort
                else
                    echo -e "${RED}No .env file found${NC}"
                fi
                ;;
                
            *)
                echo "Usage: ./dev env [check|list]"
                echo "  check - Verify all required variables are set"
                echo "  list  - List all environment variables"
                ;;
        esac
        ;;
        
    rebuild)
        check_requirements
        check_env
        
        # Parse arguments
        SERVICE=""
        HARD_CLEAN=false
        VERIFY=false
        
        for arg in "${@:2}"; do
            case "$arg" in
                --hard)
                    HARD_CLEAN=true
                    ;;
                --verify)
                    VERIFY=true
                    ;;
                -*)
                    echo -e "${RED}Unknown option: $arg${NC}"
                    echo "Usage: ./dev rebuild [service] [--hard] [--verify]"
                    exit 1
                    ;;
                *)
                    if [ -z "$SERVICE" ]; then
                        SERVICE="$arg"
                    fi
                    ;;
            esac
        done
        
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Docker Service Rebuild${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Determine what to rebuild
        if [ -n "$SERVICE" ]; then
            echo -e "${CYAN}Target:${NC} $SERVICE"
        else
            echo -e "${CYAN}Target:${NC} All services"
        fi
        
        if [ "$HARD_CLEAN" = true ]; then
            echo -e "${CYAN}Mode:${NC} Hard clean (aggressive cache clearing)"
        else
            echo -e "${CYAN}Mode:${NC} Standard rebuild"
        fi
        echo ""
        
        # Step 1: Stop services
        if [ -n "$SERVICE" ]; then
            echo -e "${YELLOW}→${NC} Stopping $SERVICE..."
            docker-compose stop "$SERVICE" 2>/dev/null || true
            
            # Remove the container
            CONTAINER_NAME="${PROJECT_NAME}-${SERVICE}-1"
            docker rm "$CONTAINER_NAME" 2>/dev/null || true
        else
            echo -e "${YELLOW}→${NC} Stopping all services..."
            docker-compose down
        fi
        
        # Step 2: Clear caches based on mode
        if [ "$HARD_CLEAN" = true ]; then
            echo -e "${YELLOW}→${NC} Performing aggressive cache cleanup..."
            
            if [ -n "$SERVICE" ]; then
                # Remove specific service image
                IMAGE_NAME="${PROJECT_NAME}_${SERVICE}"
                echo "  • Removing image: $IMAGE_NAME"
                docker rmi "$IMAGE_NAME" 2>/dev/null || true
                
                # Remove dangling images
                docker image prune -f >/dev/null 2>&1
                
                # Clear builder cache for this service
                echo "  • Clearing builder cache"
                docker builder prune -f --filter "label=com.docker.compose.project=${PROJECT_NAME}" >/dev/null 2>&1
            else
                # Full system cleanup
                echo "  • Removing all project images"
                docker-compose down --rmi all 2>/dev/null || true
                
                echo "  • Clearing all builder cache"
                docker builder prune -af >/dev/null 2>&1
                
                echo "  • Removing dangling volumes"
                docker volume prune -f >/dev/null 2>&1
            fi
        else
            echo -e "${YELLOW}→${NC} Standard cache clear..."
            if [ -n "$SERVICE" ]; then
                # Just remove the specific container
                echo "  • Container removed"
            fi
        fi
        
        # Step 3: For Next.js services, clear local build cache
        if [ -n "$SERVICE" ]; then
            if [ -d "services/$SERVICE/.next" ]; then
                echo -e "${YELLOW}→${NC} Clearing Next.js build cache for $SERVICE..."
                rm -rf "services/$SERVICE/.next"
            fi
        else
            # Clear all Next.js caches
            for next_dir in services/*/.next; do
                if [ -d "$next_dir" ]; then
                    service_name=$(basename $(dirname "$next_dir"))
                    echo -e "${YELLOW}→${NC} Clearing Next.js cache for $service_name..."
                    rm -rf "$next_dir"
                fi
            done
        fi
        
        # Step 4: Rebuild
        echo ""
        echo -e "${YELLOW}→${NC} Rebuilding..."
        
        if [ -n "$SERVICE" ]; then
            if [ "$HARD_CLEAN" = true ]; then
                docker-compose build --no-cache --pull "$SERVICE"
            else
                docker-compose build "$SERVICE"
            fi
        else
            if [ "$HARD_CLEAN" = true ]; then
                docker-compose build --no-cache --pull
            else
                docker-compose build
            fi
        fi
        
        # Step 5: Start services
        echo ""
        echo -e "${YELLOW}→${NC} Starting services..."
        
        if [ -n "$SERVICE" ]; then
            docker-compose up -d "$SERVICE"
        else
            docker-compose up -d
        fi
        
        # Step 6: Verify if requested
        if [ "$VERIFY" = true ] || [ -n "$SERVICE" ]; then
            echo ""
            echo -e "${YELLOW}→${NC} Verifying deployment..."
            
            # Wait for services to be ready
            sleep 5
            
            # Function to verify a service
            verify_service() {
                local svc="$1"
                local verified=false
                
                case "$svc" in
                    lawyer-chat)
                        echo -n "  • Checking $svc deployment... "
                        
                        # Get container BUILD_ID
                        CONTAINER_BUILD_ID=$(docker exec "$CONTAINER" cat /app/.next/BUILD_ID 2>/dev/null || echo "")
                        if [ -n "$CONTAINER_BUILD_ID" ]; then
                            echo -e "${GREEN}✓${NC} Running"
                            echo "    Build ID: $CONTAINER_BUILD_ID"
                            
                            # Check for key components in the build
                            COMPONENTS=("CitationPanel" "DocumentCabinet" "extractCitation")
                            FOUND_COUNT=0
                            for comp in "${COMPONENTS[@]}"; do
                                if docker exec "$CONTAINER" grep -q "$comp" /app/.next/server/app/page.js 2>/dev/null; then
                                    ((FOUND_COUNT++))
                                fi
                            done
                            echo "    Components verified: $FOUND_COUNT/${#COMPONENTS[@]}"
                            
                            # Compare with local build if exists
                            if [ -f "services/lawyer-chat/.next/BUILD_ID" ]; then
                                LOCAL_BUILD_ID=$(cat "services/lawyer-chat/.next/BUILD_ID")
                                if [ "$LOCAL_BUILD_ID" = "$CONTAINER_BUILD_ID" ]; then
                                    echo "    ${YELLOW}⚠${NC} Same as local build (may need rebuild)"
                                else
                                    echo "    ${GREEN}✓${NC} Different from local build"
                                fi
                            fi
                        else
                            echo -e "${RED}✗${NC} Could not verify"
                        fi
                        ;;
                    
                    web)
                        # Check if web reverse proxy is working
                        echo -n "  • Checking $svc for recent changes... "
                        
                        # Try to find evidence of recent code changes
                        if curl -s "http://localhost:${WEB_PORT:-8080}" | grep -q "DocumentContext\|CitationPanel" 2>/dev/null; then
                            echo -e "${GREEN}✓${NC} UI components present"
                        else
                            echo -e "${YELLOW}⚠${NC} Could not verify components"
                        fi
                        ;;
                        
                    court-processor)
                        echo -n "  • Checking $svc API... "
                        if curl -s "http://localhost:8104/health" | grep -q "ok\|healthy" 2>/dev/null; then
                            echo -e "${GREEN}✓${NC} API responding"
                        else
                            echo -e "${RED}✗${NC} API not responding"
                        fi
                        ;;
                        
                    n8n)
                        echo -n "  • Checking $svc... "
                        if curl -s "http://localhost:${N8N_PORT:-8100}" >/dev/null 2>&1; then
                            echo -e "${GREEN}✓${NC} Service responding"
                        else
                            echo -e "${YELLOW}⚠${NC} Service may still be starting"
                        fi
                        ;;
                        
                    *)
                        # Generic container check
                        CONTAINER="${PROJECT_NAME}-${svc}-1"
                        if docker ps | grep -q "$CONTAINER"; then
                            echo "  • $svc: ${GREEN}✓${NC} Container running"
                        else
                            echo "  • $svc: ${RED}✗${NC} Container not running"
                        fi
                        ;;
                esac
            }
            
            if [ -n "$SERVICE" ]; then
                verify_service "$SERVICE"
            else
                # Verify key services
                for svc in lawyer-chat court-processor n8n; do
                    if docker ps | grep -q "${PROJECT_NAME}-${svc}-1"; then
                        verify_service "$svc"
                    fi
                done
            fi
        fi
        
        echo ""
        echo -e "${GREEN}✓ Rebuild complete!${NC}"
        
        if [ -n "$SERVICE" ] && [ "$SERVICE" = "lawyer-chat" ]; then
            echo ""
            echo "Access lawyer-chat at: http://localhost:${WEB_PORT:-8080}"
        fi
        ;;
        
    verify-frontend)
        # Run the verification script
        if [ -f "scripts/verify-lawyer-chat.sh" ]; then
            bash scripts/verify-lawyer-chat.sh
        else
            echo -e "${RED}Verification script not found${NC}"
            echo "Expected at: scripts/verify-lawyer-chat.sh"
        fi
        ;;
        
    help|--help|-h|"")
        show_help
        ;;
        
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac