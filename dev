#!/bin/bash

# ============================================================================
# Aletheia Developer CLI v3.0 - Modular Architecture
# ============================================================================
# This is the main entry point that sources modular components
# Each module handles specific functionality for better maintainability

# Script directory detection for module sourcing
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# ============================================================================
# Core Configuration
# ============================================================================

# Set PROJECT_NAME for docker-compose operations
export PROJECT_NAME="${COMPOSE_PROJECT_NAME:-aletheia_development}"

# Docker Compose command detection (v2 vs v1)
if command -v "docker" &> /dev/null && docker compose version &> /dev/null 2>&1; then
    export DOCKER_COMPOSE="docker compose"
elif command -v "docker-compose" &> /dev/null; then
    export DOCKER_COMPOSE="docker-compose"
else
    export DOCKER_COMPOSE=""
fi

# Output format (default or json)
export OUTPUT_FORMAT="${OUTPUT_FORMAT:-}"
if [[ "$*" == *"--json"* ]]; then
    export OUTPUT_FORMAT="json"
    # Remove --json from arguments
    set -- "${@/--json/}"
fi

# Color codes (disabled in JSON mode)
if [ "$OUTPUT_FORMAT" != "json" ]; then
    export RED='\033[0;31m'
    export GREEN='\033[0;32m'
    export YELLOW='\033[1;33m'
    export BLUE='\033[0;34m'
    export CYAN='\033[0;36m'
    export NC='\033[0m' # No Color
else
    export RED=''
    export GREEN=''
    export YELLOW=''
    export BLUE=''
    export CYAN=''
    export NC=''
fi

# Load environment variables
if [ -f .env ]; then
    set -a
    source .env
    set +a
fi

# ============================================================================
# Source All Modules
# ============================================================================

# Source common library first (contains shared functions)
source "$SCRIPT_DIR/dev-modules/dev-lib.sh"

# Source all other modules
source "$SCRIPT_DIR/dev-modules/dev-help.sh"
source "$SCRIPT_DIR/dev-modules/dev-services.sh"
source "$SCRIPT_DIR/dev-modules/dev-db.sh"
source "$SCRIPT_DIR/dev-modules/dev-utils.sh"
source "$SCRIPT_DIR/dev-modules/dev-env.sh"
source "$SCRIPT_DIR/dev-modules/dev-docs.sh"
source "$SCRIPT_DIR/dev-modules/dev-n8n.sh"

# ============================================================================
# Main Command Router
# ============================================================================

# Main command processing
case "$1" in
    # Service Management Commands
    up|start)
        service_up "$2"
        ;;
        
    down|stop)
        service_down "$2"
        ;;
        
    restart)
        service_restart "$2"
        ;;
        
    status|ps)
        service_status
        ;;
        
    logs|log)
        service_logs "$2"
        ;;
        
    shell|exec)
        service_shell "$2"
        ;;
        
    services|list)
        service_list
        ;;
        
    clean)
        service_clean
        ;;
        
    # Database Commands
    db)
        handle_db_command "$2" "${@:3}"
        ;;
        
    # Utility Commands
    setup)
        utils_setup "${@:2}"
        ;;
        
    doctor)
        utils_doctor
        ;;
        
    validate)
        utils_validate
        ;;
        
    health)
        utils_health
        ;;
        
    backup)
        utils_backup
        ;;
        
    rebuild)
        utils_rebuild "${@:2}"
        ;;
        
    cleanup)
        utils_cleanup
        ;;
        
    reload-nginx)
        utils_reload_nginx
        ;;
        
    seed-users)
        utils_seed_users
        ;;
        
    verify-frontend)
        utils_verify_frontend
        ;;
        
    # Environment Commands
    env)
        handle_env_command "$2" "${@:3}"
        ;;
        
    ports)
        env_ports
        ;;
        
    # Documentation Commands
    docs)
        handle_docs_command "$2" "${@:3}"
        ;;
        
    # n8n Commands
    n8n)
        handle_n8n_command "$2" "${@:3}"
        ;;
        
    # Help
    help|--help|-h|"")
        show_help
        ;;
        
    *)
        if [ "$OUTPUT_FORMAT" = "json" ]; then
            echo "{\"status\":\"error\",\"message\":\"Unknown command: $1\"}"
        else
            echo -e "${RED}Unknown command: $1${NC}"
            echo ""
            show_help
        fi
        exit $EXIT_CONFIG_ERROR
        ;;
esac

# Exit with appropriate code
exit ${EXIT_CODE:-$?}