#!/bin/bash

# Aletheia Developer CLI - The ONE script you need
# Consolidated from 14+ separate scripts into one unified tool
# Version: 2.0

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Project configuration
PROJECT_NAME=${COMPOSE_PROJECT_NAME:-aletheia_development}
BASE_URL=${BASE_URL:-"http://localhost:8080"}

# Function to show usage
show_help() {
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║     Aletheia Developer CLI v2.0       ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo "Usage: ./dev [command] [options]"
    echo ""
    echo -e "${CYAN}Core Commands:${NC}"
    echo "  up [service]    Start all services (or specific one)"
    echo "  down [service]  Stop all services (or specific one)"
    echo "  restart [name]  Restart a specific service (or all if no name)"
    echo "  logs [name]     Show logs (all services or specific one)"
    echo "  status          Show detailed status of all services"
    echo "  services        List all available services"
    echo "  shell [name]    Open shell in a container"
    echo ""
    echo -e "${CYAN}Health & Validation:${NC}"
    echo "  health          Run health checks on all services"
    echo "  validate        Validate setup and configuration"
    echo "  ports           Show port usage and availability"
    echo ""
    echo -e "${CYAN}Setup & Maintenance:${NC}"
    echo "  setup           Initial setup wizard (generate secure .env)"
    echo "  backup          Backup database and configurations"
    echo "  cleanup         Archive old/backup files to .archive/"
    echo "  clean           Stop services and clean volumes (WARNING: deletes data)"
    echo "  reload-nginx    Reload nginx configuration without restart"
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo "  ./dev up                  # Start everything"
    echo "  ./dev up n8n             # Start only n8n service"
    echo "  ./dev down lawyer-chat   # Stop only lawyer-chat"
    echo "  ./dev health              # Check if everything is working"
    echo "  ./dev logs n8n           # Show n8n logs"
    echo "  ./dev shell db           # Open PostgreSQL shell"
}

# Check if docker and docker-compose are installed
check_requirements() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Error: Docker is not installed${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}Error: docker-compose is not installed${NC}"
        exit 1
    fi
}

# Check if .env exists
check_env() {
    if [ ! -f .env ]; then
        if [ -f .env.required ]; then
            echo -e "${YELLOW}No .env file found. Creating from .env.required...${NC}"
            cp .env.required .env
            echo -e "${GREEN}Created .env file. Please edit it with your values.${NC}"
            echo -e "${YELLOW}Run './dev up' when ready.${NC}"
            exit 0
        else
            echo -e "${RED}No .env file found!${NC}"
            echo "Please create one with at least these variables:"
            echo "  DB_PASSWORD=<your_password>"
            echo "  N8N_ENCRYPTION_KEY=<your_key>"
            echo "  NEXTAUTH_SECRET=<your_secret>"
            exit 1
        fi
    fi
}

# Main command handling
case "$1" in
    up|start)
        check_requirements
        check_env
        
        # Check if specific service requested
        if [ -n "$2" ]; then
            echo -e "${BLUE}Starting $2...${NC}"
            docker-compose up -d "$2"
            echo -e "${GREEN}✓ Service $2 started${NC}"
        else
            echo -e "${BLUE}Starting all Aletheia services...${NC}"
            docker-compose up -d
            echo ""
            echo -e "${GREEN}✓ Services started successfully!${NC}"
            echo ""
            echo "Access points:"
            echo "  • Main app:     http://localhost:8080"
            echo "  • n8n:          http://localhost:8100"
            echo "            User: velvetmoon222999@gmail.com"
            echo "            Pass: Welcome123!"
            echo "  • Lawyer Chat:  http://localhost:8080/chat"
            echo "  • AI Portal:    http://localhost:8085"
            echo ""
            echo "Run './dev logs' to see output"
            echo "Run './dev health' to check services"
        fi
        ;;
        
    down|stop)
        check_requirements
        
        # Check if specific service requested
        if [ -n "$2" ]; then
            echo -e "${BLUE}Stopping $2...${NC}"
            docker-compose stop "$2"
            echo -e "${GREEN}✓ Service $2 stopped${NC}"
        else
            echo -e "${BLUE}Stopping all Aletheia services...${NC}"
            docker-compose down
            echo -e "${GREEN}✓ All services stopped${NC}"
        fi
        ;;
        
    restart)
        check_requirements
        if [ -z "$2" ]; then
            echo -e "${BLUE}Restarting all services...${NC}"
            docker-compose restart
        else
            echo -e "${BLUE}Restarting $2...${NC}"
            docker-compose restart "$2"
        fi
        echo -e "${GREEN}✓ Restart complete${NC}"
        ;;
        
    logs|log)
        check_requirements
        if [ -z "$2" ]; then
            docker-compose logs -f --tail=100
        else
            docker-compose logs -f --tail=100 "$2"
        fi
        ;;
        
    status|ps)
        check_requirements
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Service Status${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Container status
        echo -e "${CYAN}Containers:${NC}"
        docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        
        # Health status
        echo -e "${CYAN}Health Status:${NC}"
        healthy=0
        unhealthy=0
        nocheck=0
        
        for container in $(docker ps --format "{{.Names}}" | grep "${PROJECT_NAME}"); do
            health=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "no check")
            
            case "$health" in
                healthy)
                    echo -e "${GREEN}✓${NC} $container: healthy"
                    healthy=$((healthy + 1))
                    ;;
                unhealthy|starting)
                    echo -e "${RED}✗${NC} $container: $health"
                    unhealthy=$((unhealthy + 1))
                    ;;
                "no check")
                    echo -e "${YELLOW}○${NC} $container: no health check"
                    nocheck=$((nocheck + 1))
                    ;;
            esac
        done
        
        echo ""
        echo "Summary: ${GREEN}$healthy healthy${NC}, ${RED}$unhealthy issues${NC}, ${YELLOW}$nocheck unchecked${NC}"
        ;;
        
    shell|exec)
        check_requirements
        if [ -z "$2" ]; then
            echo -e "${RED}Please specify a service name${NC}"
            echo "Example: ./dev shell db"
            exit 1
        fi
        
        case "$2" in
            db|postgres)
                echo -e "${BLUE}Opening PostgreSQL shell...${NC}"
                docker-compose exec db psql -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}"
                ;;
            n8n)
                echo -e "${BLUE}Opening n8n shell...${NC}"
                docker-compose exec n8n /bin/sh
                ;;
            *)
                echo -e "${BLUE}Opening shell in $2...${NC}"
                docker-compose exec "$2" /bin/sh 2>/dev/null || docker-compose exec "$2" /bin/bash
                ;;
        esac
        ;;
        
    clean)
        echo -e "${YELLOW}WARNING: This will delete all data!${NC}"
        echo -n "Are you sure? (y/N): "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Cleaning up...${NC}"
            docker-compose down -v
            echo -e "${GREEN}✓ Cleanup complete${NC}"
        else
            echo "Cancelled"
        fi
        ;;
        
    cleanup)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Archiving Old Files${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Create archive directories
        mkdir -p .archive/{nginx,docker,tests,misc}
        
        # Archive nginx configs
        echo -e "${CYAN}Archiving old nginx configs...${NC}"
        moved=0
        for file in nginx/conf.d/*.bak nginx/conf.d/*.disabled nginx/conf.d/*.backup; do
            if [ -f "$file" ]; then
                mv "$file" .archive/nginx/ 2>/dev/null && moved=$((moved + 1))
            fi
        done
        [ $moved -gt 0 ] && echo -e "${GREEN}✓${NC} Archived $moved nginx config files"
        
        # Archive old docker-compose files
        echo -e "${CYAN}Archiving unused docker-compose files...${NC}"
        moved=0
        for file in docker-compose.{unified,staging,swarm,env}.yml; do
            if [ -f "$file" ]; then
                mv "$file" .archive/docker/ 2>/dev/null && moved=$((moved + 1))
            fi
        done
        [ $moved -gt 0 ] && echo -e "${GREEN}✓${NC} Archived $moved docker-compose files"
        
        # Find and archive .bak files
        echo -e "${CYAN}Finding backup files...${NC}"
        found=$(find . -maxdepth 3 -name "*.bak" -o -name "*.backup*" 2>/dev/null | grep -v .archive | wc -l)
        if [ $found -gt 0 ]; then
            echo -e "${YELLOW}Found $found backup files. Archive them? (y/N): ${NC}"
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                find . -maxdepth 3 \( -name "*.bak" -o -name "*.backup*" \) -not -path "./.archive/*" -exec mv {} .archive/misc/ \; 2>/dev/null
                echo -e "${GREEN}✓${NC} Archived backup files"
            fi
        fi
        
        # Report on test directories
        echo ""
        echo -e "${CYAN}Test directories found:${NC}"
        [ -d "pacer-test-implementation" ] && echo "  • pacer-test-implementation/ ($(find pacer-test-implementation -type f | wc -l) files)"
        [ -d "test" ] && echo "  • test/ ($(find test -type f | wc -l) files)"
        [ -d "test-data" ] && echo "  • test-data/ ($(find test-data -type f | wc -l) files)"
        [ -d "tests" ] && echo "  • tests/ ($(find tests -type f | wc -l) files)"
        echo ""
        echo -e "${YELLOW}Note: Test directories need manual review before archiving${NC}"
        echo "To consolidate: mv test* tests/ && mv pacer-test-implementation tests/"
        
        echo ""
        echo -e "${GREEN}Cleanup complete!${NC}"
        echo "Archived files are in .archive/"
        ;;
        
    health|check)
        check_requirements
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Health Checks${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        failed=0
        
        # Check main services
        echo -e "${CYAN}Web Services:${NC}"
        status=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Main Application (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Main Application (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check n8n
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8100/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ] || [ "$status" = "302" ]; then
            echo -e "${GREEN}✓${NC} n8n Interface (HTTP $status)"
        else
            echo -e "${RED}✗${NC} n8n Interface (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check database
        echo ""
        echo -e "${CYAN}Database:${NC}"
        if docker-compose exec -T db pg_isready > /dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} PostgreSQL is ready"
        else
            echo -e "${RED}✗${NC} PostgreSQL is not ready"
            failed=$((failed + 1))
        fi
        
        echo ""
        if [ $failed -eq 0 ]; then
            echo -e "${GREEN}✅ All health checks passed!${NC}"
        else
            echo -e "${RED}❌ $failed health checks failed${NC}"
        fi
        ;;
        
    validate)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Setup Validation${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        issues=0
        
        # Docker checks
        echo -e "${CYAN}Docker Environment:${NC}"
        if command -v docker &> /dev/null; then
            echo -e "${GREEN}✓${NC} Docker installed"
        else
            echo -e "${RED}✗${NC} Docker not installed"
            issues=$((issues + 1))
        fi
        
        if docker info &> /dev/null; then
            echo -e "${GREEN}✓${NC} Docker running"
        else
            echo -e "${RED}✗${NC} Docker not running"
            issues=$((issues + 1))
        fi
        
        # File checks
        echo ""
        echo -e "${CYAN}Required Files:${NC}"
        if [ -f .env ]; then
            echo -e "${GREEN}✓${NC} .env exists"
            source .env
            if [ "$DB_PASSWORD" = "aletheia123" ]; then
                echo -e "${YELLOW}⚠${NC}  DB_PASSWORD is using default (should be changed)"
            fi
        else
            echo -e "${RED}✗${NC} .env missing"
            issues=$((issues + 1))
        fi
        
        if [ -f docker-compose.yml ]; then
            echo -e "${GREEN}✓${NC} docker-compose.yml exists"
        else
            echo -e "${RED}✗${NC} docker-compose.yml missing"
            issues=$((issues + 1))
        fi
        
        echo ""
        if [ $issues -eq 0 ]; then
            echo -e "${GREEN}✅ All validation checks passed!${NC}"
        else
            echo -e "${YELLOW}⚠ Found $issues issue(s) to address${NC}"
        fi
        ;;
        
    backup)
        check_requirements
        echo -e "${BLUE}Creating backup...${NC}"
        
        timestamp=$(date +%Y%m%d_%H%M%S)
        backup_dir="backups"
        mkdir -p "$backup_dir"
        
        # Backup database
        if docker-compose exec -T db pg_dump -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}" > "$backup_dir/db_backup_${timestamp}.sql" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Database backed up to $backup_dir/db_backup_${timestamp}.sql"
        else
            echo -e "${YELLOW}⚠${NC} Database backup skipped (not running?)"
        fi
        
        # Backup .env
        if [ -f .env ]; then
            cp .env "$backup_dir/.env.backup_${timestamp}"
            echo -e "${GREEN}✓${NC} Configuration backed up"
        fi
        
        echo ""
        echo -e "${GREEN}Backup complete!${NC}"
        ;;
        
    reload-nginx)
        check_requirements
        echo -e "${BLUE}Reloading nginx configuration...${NC}"
        
        if docker-compose exec -T web nginx -t 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Configuration valid"
            docker-compose exec -T web nginx -s reload 2>/dev/null
            echo -e "${GREEN}✓${NC} Nginx reloaded"
        else
            echo -e "${RED}✗${NC} Configuration invalid"
        fi
        ;;
        
    ports)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Port Configuration${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        if [ -f .env ]; then
            source .env
        fi
        
        echo -e "${CYAN}Configured Ports:${NC}"
        echo "  Web Interface:    ${WEB_PORT:-8080}"
        echo "  n8n:             ${N8N_PORT:-8100}"
        echo "  AI Portal:       ${AI_PORTAL_PORT:-8102}"
        echo "  Court Processor: ${COURT_PROCESSOR_PORT:-8104}"
        echo "  PostgreSQL:      ${POSTGRES_PORT:-8200}"
        echo "  Redis:           ${REDIS_PORT:-8201}"
        echo ""
        ;;
        
    services|list)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Available Services${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        echo -e "${CYAN}Core Services:${NC}"
        echo "  web              - NGINX web server"
        echo "  db               - PostgreSQL database"
        echo "  redis            - Redis cache"
        echo "  n8n              - Workflow automation"
        echo ""
        
        echo -e "${CYAN}Application Services:${NC}"
        echo "  lawyer-chat      - Legal chat application"
        echo "  ai-portal        - AI services portal"
        echo "  ai-portal-nginx  - AI portal proxy"
        echo "  court-processor  - Court document processor"
        echo ""
        
        echo -e "${CYAN}Support Services:${NC}"
        echo "  docker-api       - Docker API proxy"
        echo "  recap-webhook    - RECAP webhook service"
        echo ""
        
        echo "Use: ./dev up [service] to start a specific service"
        echo "Use: ./dev down [service] to stop a specific service"
        ;;
        
    setup)
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║       Aletheia Setup Wizard            ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo ""
        
        if [ -f .env ]; then
            echo -e "${YELLOW}⚠ .env file already exists${NC}"
            echo -n "Backup and create new? (y/N): "
            read -r response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                echo "Setup cancelled"
                exit 0
            fi
            
            timestamp=$(date +%Y%m%d_%H%M%S)
            cp .env ".env.backup_${timestamp}"
            echo -e "${GREEN}✓ Backed up to .env.backup_${timestamp}${NC}"
        fi
        
        # Generate secure passwords
        generate_password() {
            LC_ALL=C tr -dc 'A-Za-z0-9!@#%^&*()_+=' < /dev/urandom | head -c "${1:-32}"
        }
        
        # Create .env
        cat > .env << EOF
# Aletheia Configuration - Generated $(date)
COMPOSE_PROJECT_NAME=aletheia_development
ENVIRONMENT=development

# Database
DB_USER=aletheia
DB_PASSWORD=$(generate_password 32)
DB_NAME=aletheia

# Ports
WEB_PORT=8080
N8N_PORT=8100
POSTGRES_PORT=8200

# Security
N8N_ENCRYPTION_KEY=$(generate_password 32)
NEXTAUTH_SECRET=$(generate_password 64)
EOF
        
        echo -e "${GREEN}✓ Generated .env with secure credentials${NC}"
        echo ""
        echo "Next: Run './dev up' to start services"
        ;;
        
    help|--help|-h|"")
        show_help
        ;;
        
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac