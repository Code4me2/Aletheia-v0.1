#!/bin/bash

# Aletheia Developer CLI - The ONE script you need
# Consolidated from 14+ separate scripts into one unified tool
# Version: 2.0

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Project configuration
PROJECT_NAME=${COMPOSE_PROJECT_NAME:-aletheia_development}
BASE_URL=${BASE_URL:-"http://localhost:8080"}

# Function to show usage
show_help() {
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║     Aletheia Developer CLI v2.0       ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo "Usage: ./dev [command] [options]"
    echo ""
    echo -e "${CYAN}Core Commands:${NC}"
    echo "  up [service]    Start all services (or specific one)"
    echo "  down [service]  Stop all services (or specific one)"
    echo "  restart [name]  Restart a specific service (or all if no name)"
    echo "  logs [name]     Show logs (all services or specific one)"
    echo "  status          Show detailed status of all services"
    echo "  services        List all available services"
    echo "  shell [name]    Open shell in a container"
    echo ""
    echo -e "${CYAN}Health & Validation:${NC}"
    echo "  health          Run health checks on all services"
    echo "  validate        Validate setup and configuration"
    echo "  ports           Show port usage and availability"
    echo ""
    echo -e "${CYAN}Documentation & Info:${NC}"
    echo "  docs verify     Check documentation accuracy"
    echo "  docs update     Update docs from running system (planned)"
    echo "  db schema       Show database schema"
    echo "  db shell        Open PostgreSQL shell"
    echo "  env check       Verify environment configuration"
    echo "  env list        List all environment variables"
    echo ""
    echo -e "${CYAN}Setup & Maintenance:${NC}"
    echo "  setup           Initial setup wizard (generate secure .env)"
    echo "  doctor          Run comprehensive system diagnostics"
    echo "  backup          Backup database and configurations"
    echo "  cleanup         Archive old/backup files to .archive/"
    echo "  clean           Stop services and clean volumes (WARNING: deletes data)"
    echo "  reload-nginx    Reload nginx configuration without restart"
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo "  ./dev up                  # Start everything"
    echo "  ./dev up n8n             # Start only n8n service"
    echo "  ./dev down lawyer-chat   # Stop only lawyer-chat"
    echo "  ./dev health              # Check if everything is working"
    echo "  ./dev logs n8n           # Show n8n logs"
    echo "  ./dev shell db           # Open PostgreSQL shell"
}

# Check if docker and docker-compose are installed
check_requirements() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Error: Docker is not installed${NC}"
        echo -e "${YELLOW}Please install Docker Desktop from: https://www.docker.com/products/docker-desktop${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}Error: docker-compose is not installed${NC}"
        echo -e "${YELLOW}Docker Compose should come with Docker Desktop. Please reinstall Docker Desktop.${NC}"
        exit 1
    fi
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        echo -e "${RED}Error: Docker daemon is not running${NC}"
        echo -e "${YELLOW}Please start Docker Desktop first:${NC}"
        echo -e "  • On macOS: Open Docker Desktop from Applications"
        echo -e "  • On Linux: Run 'sudo systemctl start docker'"
        echo -e "  • On Windows: Open Docker Desktop from Start Menu"
        echo ""
        echo -e "${CYAN}After starting Docker, run this command again.${NC}"
        exit 1
    fi
}

# Check if .env exists
check_env() {
    if [ ! -f .env ]; then
        if [ -f .env.required ]; then
            echo -e "${YELLOW}No .env file found. Creating from .env.required...${NC}"
            cp .env.required .env
            echo -e "${GREEN}Created .env file. Please edit it with your values.${NC}"
            echo -e "${YELLOW}Run './dev up' when ready.${NC}"
            exit 0
        else
            echo -e "${RED}No .env file found!${NC}"
            echo "Please create one with at least these variables:"
            echo "  DB_PASSWORD=<your_password>"
            echo "  N8N_ENCRYPTION_KEY=<your_key>"
            echo "  NEXTAUTH_SECRET=<your_secret>"
            exit 1
        fi
    fi
}

# Main command handling
case "$1" in
    up|start)
        check_requirements
        check_env
        
        # Check if specific service requested
        if [ -n "$2" ]; then
            echo -e "${BLUE}Starting $2...${NC}"
            docker-compose up -d "$2"
            echo -e "${GREEN}✓ Service $2 started${NC}"
        else
            echo -e "${BLUE}Starting all Aletheia services...${NC}"
            docker-compose up -d
            echo ""
            echo -e "${GREEN}✓ Services started successfully!${NC}"
            echo ""
            echo "Access points:"
            echo "  • Main app:     http://localhost:${WEB_PORT:-8080}"
            echo "  • n8n:          http://localhost:${N8N_PORT:-8100}"
            echo "            Note: Check n8n/README.md for credentials"
            echo "  • Lawyer Chat:  http://localhost:${WEB_PORT:-8080}/chat"
            echo "  • AI Portal:    http://localhost:${AI_PORTAL_PORT:-8102}"
            echo ""
            echo "Run './dev logs' to see output"
            echo "Run './dev health' to check services"
        fi
        ;;
        
    down|stop)
        check_requirements
        
        # Check if specific service requested
        if [ -n "$2" ]; then
            echo -e "${BLUE}Stopping $2...${NC}"
            docker-compose stop "$2"
            echo -e "${GREEN}✓ Service $2 stopped${NC}"
        else
            echo -e "${BLUE}Stopping all Aletheia services...${NC}"
            docker-compose down
            echo -e "${GREEN}✓ All services stopped${NC}"
        fi
        ;;
        
    restart)
        check_requirements
        if [ -z "$2" ]; then
            echo -e "${BLUE}Restarting all services...${NC}"
            docker-compose restart
        else
            echo -e "${BLUE}Restarting $2...${NC}"
            docker-compose restart "$2"
        fi
        echo -e "${GREEN}✓ Restart complete${NC}"
        ;;
        
    logs|log)
        check_requirements
        if [ -z "$2" ]; then
            docker-compose logs -f --tail=100
        else
            docker-compose logs -f --tail=100 "$2"
        fi
        ;;
        
    status|ps)
        check_requirements
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Service Status${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Container status
        echo -e "${CYAN}Containers:${NC}"
        docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        
        # Health status
        echo -e "${CYAN}Health Status:${NC}"
        healthy=0
        unhealthy=0
        nocheck=0
        
        for container in $(docker ps --format "{{.Names}}" --filter "label=com.docker.compose.project=${PROJECT_NAME}"); do
            # Special handling for known containers without standard health checks
            if [[ "$container" == *"recap-webhook"* ]]; then
                echo -e "${YELLOW}○${NC} $container: health check ignored"
                nocheck=$((nocheck + 1))
                continue
            fi
            
            # Try to get health status
            health=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}no check{{end}}' "$container" 2>/dev/null || echo "error")
            
            case "$health" in
                healthy)
                    echo -e "${GREEN}✓${NC} $container: healthy"
                    healthy=$((healthy + 1))
                    ;;
                unhealthy|starting)
                    # Skip recap-webhook unhealthy status as it's expected
                    if [[ "$container" != *"recap-webhook"* ]]; then
                        echo -e "${RED}✗${NC} $container: $health"
                        unhealthy=$((unhealthy + 1))
                    fi
                    ;;
                "no check"|"")
                    echo -e "${YELLOW}○${NC} $container: no health check"
                    nocheck=$((nocheck + 1))
                    ;;
                error)
                    echo -e "${RED}✗${NC} $container: inspection failed"
                    unhealthy=$((unhealthy + 1))
                    ;;
            esac
        done
        
        echo ""
        echo "Summary: ${GREEN}$healthy healthy${NC}, ${RED}$unhealthy issues${NC}, ${YELLOW}$nocheck unchecked${NC}"
        ;;
        
    shell|exec)
        check_requirements
        if [ -z "$2" ]; then
            echo -e "${RED}Please specify a service name${NC}"
            echo "Example: ./dev shell db"
            exit 1
        fi
        
        case "$2" in
            db|postgres)
                echo -e "${BLUE}Opening PostgreSQL shell...${NC}"
                docker-compose exec db psql -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}"
                ;;
            n8n)
                echo -e "${BLUE}Opening n8n shell...${NC}"
                docker-compose exec n8n /bin/sh
                ;;
            *)
                echo -e "${BLUE}Opening shell in $2...${NC}"
                docker-compose exec "$2" /bin/sh 2>/dev/null || docker-compose exec "$2" /bin/bash
                ;;
        esac
        ;;
        
    clean)
        echo -e "${YELLOW}WARNING: This will delete all data!${NC}"
        echo -n "Are you sure? (y/N): "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Cleaning up...${NC}"
            docker-compose down -v
            echo -e "${GREEN}✓ Cleanup complete${NC}"
        else
            echo "Cancelled"
        fi
        ;;
        
    cleanup)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Archiving Old Files${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        # Create archive directories
        mkdir -p .archive/{nginx,docker,tests,misc}
        
        # Archive nginx configs
        echo -e "${CYAN}Archiving old nginx configs...${NC}"
        moved=0
        for file in nginx/conf.d/*.bak nginx/conf.d/*.disabled nginx/conf.d/*.backup; do
            if [ -f "$file" ]; then
                mv "$file" .archive/nginx/ 2>/dev/null && moved=$((moved + 1))
            fi
        done
        [ $moved -gt 0 ] && echo -e "${GREEN}✓${NC} Archived $moved nginx config files"
        
        # Archive old docker-compose files
        echo -e "${CYAN}Archiving unused docker-compose files...${NC}"
        moved=0
        for file in docker-compose.{unified,staging,swarm,env}.yml; do
            if [ -f "$file" ]; then
                mv "$file" .archive/docker/ 2>/dev/null && moved=$((moved + 1))
            fi
        done
        [ $moved -gt 0 ] && echo -e "${GREEN}✓${NC} Archived $moved docker-compose files"
        
        # Find and archive .bak files
        echo -e "${CYAN}Finding backup files...${NC}"
        found=$(find . -maxdepth 3 -name "*.bak" -o -name "*.backup*" 2>/dev/null | grep -v .archive | wc -l)
        if [ $found -gt 0 ]; then
            echo -e "${YELLOW}Found $found backup files. Archive them? (y/N): ${NC}"
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                find . -maxdepth 3 \( -name "*.bak" -o -name "*.backup*" \) -not -path "./.archive/*" -exec mv {} .archive/misc/ \; 2>/dev/null
                echo -e "${GREEN}✓${NC} Archived backup files"
            fi
        fi
        
        # Report on test directories
        echo ""
        echo -e "${CYAN}Test directories found:${NC}"
        [ -d "pacer-test-implementation" ] && echo "  • pacer-test-implementation/ ($(find pacer-test-implementation -type f | wc -l) files)"
        [ -d "test" ] && echo "  • test/ ($(find test -type f | wc -l) files)"
        [ -d "test-data" ] && echo "  • test-data/ ($(find test-data -type f | wc -l) files)"
        [ -d "tests" ] && echo "  • tests/ ($(find tests -type f | wc -l) files)"
        echo ""
        echo -e "${YELLOW}Note: Test directories need manual review before archiving${NC}"
        echo "To consolidate: mv test* tests/ && mv pacer-test-implementation tests/"
        
        echo ""
        echo -e "${GREEN}Cleanup complete!${NC}"
        echo "Archived files are in .archive/"
        ;;
        
    health|check)
        check_requirements
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Health Checks${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        failed=0
        
        # Check main services
        echo -e "${CYAN}Web Services:${NC}"
        status=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Main Application (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Main Application (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check n8n
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${N8N_PORT:-8100}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ] || [ "$status" = "302" ]; then
            echo -e "${GREEN}✓${NC} n8n Interface (HTTP $status)"
        else
            echo -e "${RED}✗${NC} n8n Interface (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check Lawyer Chat
        status=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/chat" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Lawyer Chat (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Lawyer Chat (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check AI Portal
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${AI_PORTAL_PORT:-8102}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} AI Portal (HTTP $status)"
        else
            echo -e "${RED}✗${NC} AI Portal (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check Court Processor
        status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${COURT_PROCESSOR_PORT:-8104}/" 2>/dev/null || echo "000")
        if [ "$status" = "200" ]; then
            echo -e "${GREEN}✓${NC} Court Processor API (HTTP $status)"
        else
            echo -e "${RED}✗${NC} Court Processor API (HTTP $status)"
            failed=$((failed + 1))
        fi
        
        # Check database
        echo ""
        echo -e "${CYAN}Database:${NC}"
        if docker-compose exec -T db pg_isready > /dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} PostgreSQL is ready"
        else
            echo -e "${RED}✗${NC} PostgreSQL is not ready"
            failed=$((failed + 1))
        fi
        
        echo ""
        if [ $failed -eq 0 ]; then
            echo -e "${GREEN}✅ All health checks passed!${NC}"
        else
            echo -e "${RED}❌ $failed health checks failed${NC}"
        fi
        ;;
        
    validate)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Comprehensive System Validation${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        issues=0
        warnings=0
        
        # Docker checks
        echo -e "${CYAN}1. Docker Environment:${NC}"
        if command -v docker &> /dev/null; then
            echo -e "${GREEN}✓${NC} Docker installed"
        else
            echo -e "${RED}✗${NC} Docker not installed"
            issues=$((issues + 1))
        fi
        
        if docker info &> /dev/null; then
            echo -e "${GREEN}✓${NC} Docker daemon running"
        else
            echo -e "${RED}✗${NC} Docker daemon not running"
            issues=$((issues + 1))
        fi
        
        if command -v docker-compose &> /dev/null; then
            echo -e "${GREEN}✓${NC} docker-compose installed"
        else
            echo -e "${RED}✗${NC} docker-compose not installed"
            issues=$((issues + 1))
        fi
        
        # File checks
        echo ""
        echo -e "${CYAN}2. Configuration Files:${NC}"
        if [ -f .env ]; then
            echo -e "${GREEN}✓${NC} .env exists"
            source .env
            # Check for common weak passwords
            if [[ "$DB_PASSWORD" =~ ^(password|123456|admin|default|aletheia123|postgres)$ ]]; then
                echo -e "${YELLOW}⚠${NC}  DB_PASSWORD appears to be a weak/default password (security risk)"
                warnings=$((warnings + 1))
            fi
        else
            echo -e "${RED}✗${NC} .env missing"
            issues=$((issues + 1))
        fi
        
        if [ -f docker-compose.yml ]; then
            echo -e "${GREEN}✓${NC} docker-compose.yml exists"
            # Validate docker-compose syntax
            if docker-compose config > /dev/null 2>&1; then
                echo -e "${GREEN}✓${NC} docker-compose.yml syntax valid"
            else
                echo -e "${RED}✗${NC} docker-compose.yml has syntax errors"
                issues=$((issues + 1))
            fi
        else
            echo -e "${RED}✗${NC} docker-compose.yml missing"
            issues=$((issues + 1))
        fi
        
        # Port availability
        echo ""
        echo -e "${CYAN}3. Port Availability:${NC}"
        ports_to_check="${WEB_PORT:-8080} ${N8N_PORT:-8100} ${AI_PORTAL_PORT:-8102} ${COURT_PROCESSOR_PORT:-8104} ${POSTGRES_PORT:-8200} ${REDIS_PORT:-8201}"
        port_issues=0
        for port in $ports_to_check; do
            if lsof -i :$port > /dev/null 2>&1; then
                service_name=$(docker ps --format "table {{.Names}}\t{{.Ports}}" | grep $port | awk '{print $1}' | head -1)
                if [ -n "$service_name" ]; then
                    echo -e "${GREEN}✓${NC} Port $port in use by $service_name (expected)"
                else
                    echo -e "${YELLOW}⚠${NC}  Port $port in use by non-Docker process"
                    port_issues=$((port_issues + 1))
                fi
            else
                echo -e "${GREEN}✓${NC} Port $port available"
            fi
        done
        
        if [ $port_issues -gt 0 ]; then
            warnings=$((warnings + port_issues))
        fi
        
        # Service health
        echo ""
        echo -e "${CYAN}4. Service Health:${NC}"
        if docker-compose ps 2>/dev/null | grep -q "Up"; then
            healthy=$(docker ps --filter "health=healthy" --format "{{.Names}}" | wc -l | tr -d ' ')
            unhealthy=$(docker ps --filter "health=unhealthy" --format "{{.Names}}" | wc -l | tr -d ' ')
            total=$(docker ps --format "{{.Names}}" | wc -l | tr -d ' ')
            
            echo -e "${GREEN}✓${NC} $total services running"
            if [ "$healthy" -gt 0 ]; then
                echo -e "${GREEN}✓${NC} $healthy services healthy"
            fi
            if [ "$unhealthy" -gt 0 ]; then
                echo -e "${YELLOW}⚠${NC}  $unhealthy services unhealthy"
                warnings=$((warnings + unhealthy))
            fi
        else
            echo -e "${YELLOW}⚠${NC}  No services running"
        fi
        
        # Documentation check
        echo ""
        echo -e "${CYAN}5. Documentation:${NC}"
        if [ -f docs/SERVICE_DEPENDENCIES.md ] && [ -f docs/PORT_CONFIGURATION.md ] && [ -f docs/DATABASE.md ]; then
            echo -e "${GREEN}✓${NC} Core documentation present"
        else
            echo -e "${YELLOW}⚠${NC}  Some documentation missing"
            warnings=$((warnings + 1))
        fi
        
        # Disk space
        echo ""
        echo -e "${CYAN}6. System Resources:${NC}"
        available_space=$(df -h . | awk 'NR==2 {print $4}')
        echo "  Disk space available: $available_space"
        
        # Summary
        echo ""
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        if [ $issues -eq 0 ] && [ $warnings -eq 0 ]; then
            echo -e "${GREEN}✅ All validation checks passed!${NC}"
        elif [ $issues -eq 0 ]; then
            echo -e "${YELLOW}⚠ System operational with $warnings warning(s)${NC}"
        else
            echo -e "${RED}❌ Found $issues critical issue(s) and $warnings warning(s)${NC}"
            echo ""
            echo "Run './dev setup' to fix configuration issues"
        fi
        ;;
        
    backup)
        check_requirements
        echo -e "${BLUE}Creating backup...${NC}"
        
        timestamp=$(date +%Y%m%d_%H%M%S)
        backup_dir="backups"
        mkdir -p "$backup_dir"
        
        # Backup database
        if docker-compose exec -T db pg_dump -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}" > "$backup_dir/db_backup_${timestamp}.sql" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Database backed up to $backup_dir/db_backup_${timestamp}.sql"
        else
            echo -e "${YELLOW}⚠${NC} Database backup skipped (not running?)"
        fi
        
        # Backup .env
        if [ -f .env ]; then
            cp .env "$backup_dir/.env.backup_${timestamp}"
            echo -e "${GREEN}✓${NC} Configuration backed up"
        fi
        
        echo ""
        echo -e "${GREEN}Backup complete!${NC}"
        ;;
        
    reload-nginx)
        check_requirements
        echo -e "${BLUE}Reloading nginx configuration...${NC}"
        
        if docker-compose exec -T web nginx -t 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Configuration valid"
            docker-compose exec -T web nginx -s reload 2>/dev/null
            echo -e "${GREEN}✓${NC} Nginx reloaded"
        else
            echo -e "${RED}✗${NC} Configuration invalid"
        fi
        ;;
        
    ports)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Port Configuration${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        if [ -f .env ]; then
            source .env
        fi
        
        echo -e "${CYAN}Configured Ports:${NC}"
        echo "  Web Interface:    ${WEB_PORT:-8080}"
        echo "  n8n:             ${N8N_PORT:-8100}"
        echo "  AI Portal:       ${AI_PORTAL_PORT:-8102}"
        echo "  Court Processor: ${COURT_PROCESSOR_PORT:-8104}"
        echo "  PostgreSQL:      ${POSTGRES_PORT:-8200}"
        echo "  Redis:           ${REDIS_PORT:-8201}"
        echo "  Docker API:      ${DOCKER_API_PORT:-5002}"
        echo "  RECAP Webhook:   ${RECAP_WEBHOOK_PORT:-5001}"
        echo ""
        ;;
        
    services|list)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Available Services${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        echo -e "${CYAN}Core Services:${NC}"
        echo "  web              - NGINX web server"
        echo "  db               - PostgreSQL database"
        echo "  redis            - Redis cache"
        echo "  n8n              - Workflow automation"
        echo ""
        
        echo -e "${CYAN}Application Services:${NC}"
        echo "  lawyer-chat      - Legal chat application"
        echo "  ai-portal        - AI services portal"
        echo "  ai-portal-nginx  - AI portal proxy"
        echo "  court-processor  - Court document processor"
        echo ""
        
        echo -e "${CYAN}Support Services:${NC}"
        echo "  docker-api       - Docker API proxy"
        echo "  recap-webhook    - RECAP webhook service"
        echo ""
        
        echo "Use: ./dev up [service] to start a specific service"
        echo "Use: ./dev down [service] to stop a specific service"
        ;;
        
    setup)
        # Check for non-interactive mode
        NON_INTERACTIVE=false
        FORCE=false
        for arg in "$@"; do
            case $arg in
                --non-interactive|-n)
                    NON_INTERACTIVE=true
                    ;;
                --force|-f)
                    FORCE=true
                    ;;
                --help|-h)
                    echo "Usage: ./dev setup [options]"
                    echo ""
                    echo "Options:"
                    echo "  --non-interactive, -n  Run without prompts (auto-backup existing .env)"
                    echo "  --force, -f           Overwrite .env without backup"
                    echo "  --help, -h            Show this help message"
                    exit 0
                    ;;
            esac
        done
        
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║       Aletheia Setup Wizard            ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo ""
        
        if [ -f .env ]; then
            if [ "$FORCE" = true ]; then
                echo -e "${YELLOW}⚠ Overwriting existing .env file (--force)${NC}"
            elif [ "$NON_INTERACTIVE" = true ]; then
                timestamp=$(date +%Y%m%d_%H%M%S)
                cp .env ".env.backup_${timestamp}"
                echo -e "${GREEN}✓ Backed up existing .env to .env.backup_${timestamp}${NC}"
            else
                echo -e "${YELLOW}⚠ .env file already exists${NC}"
                echo -n "Backup and create new? (y/N): "
                read -r response
                if [[ ! "$response" =~ ^[Yy]$ ]]; then
                    echo "Setup cancelled"
                    exit 0
                fi
                
                timestamp=$(date +%Y%m%d_%H%M%S)
                cp .env ".env.backup_${timestamp}"
                echo -e "${GREEN}✓ Backed up to .env.backup_${timestamp}${NC}"
            fi
        fi
        
        # Generate secure passwords
        generate_password() {
            LC_ALL=C tr -dc 'A-Za-z0-9!@#%^&*()_+=' < /dev/urandom | head -c "${1:-32}"
        }
        
        # Create .env
        cat > .env << EOF
# Aletheia Configuration - Generated $(date)
COMPOSE_PROJECT_NAME=aletheia_development
ENVIRONMENT=development

# Database
DB_USER=aletheia
DB_PASSWORD=$(generate_password 32)
DB_NAME=aletheia
DB_HOST=db
DB_PORT=5432

# Ports
WEB_PORT=8080
N8N_PORT=8100
AI_PORTAL_PORT=8102
COURT_PROCESSOR_PORT=8104
POSTGRES_PORT=8200
REDIS_PORT=8201

# Security
N8N_ENCRYPTION_KEY=$(generate_password 32)
NEXTAUTH_SECRET=$(generate_password 64)
N8N_WEBHOOK_ID=c188c31c-1c45-4118-9ece-5b6057ab5177

# Optional - N8N API Credentials (leave empty if not using API)
N8N_API_KEY=
N8N_API_SECRET=

# Optional - AI Service Keys
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
EOF
        
        echo -e "${GREEN}✓ Generated .env with secure credentials${NC}"
        echo ""
        echo "Next: Run './dev up' to start services"
        ;;
        
    docs)
        case "$2" in
            verify)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Documentation Verification${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                errors=0
                
                # Check SERVICE_DEPENDENCIES.md
                echo -e "${CYAN}Checking SERVICE_DEPENDENCIES.md...${NC}"
                if [ -f docs/SERVICE_DEPENDENCIES.md ]; then
                    deps_in_compose=$(grep -c "depends_on:" docker-compose.yml 2>/dev/null || echo "0")
                    deps_in_docs=$(grep -c "→" docs/SERVICE_DEPENDENCIES.md 2>/dev/null || echo "0")
                    if [ "$deps_in_compose" -gt 0 ] && [ "$deps_in_docs" -gt 0 ]; then
                        echo -e "${GREEN}✓${NC} SERVICE_DEPENDENCIES.md exists"
                    else
                        echo -e "${YELLOW}⚠${NC}  SERVICE_DEPENDENCIES.md may need updating"
                        errors=$((errors + 1))
                    fi
                else
                    echo -e "${RED}✗${NC} SERVICE_DEPENDENCIES.md missing"
                    errors=$((errors + 1))
                fi
                
                # Check PORT_CONFIGURATION.md
                echo -e "${CYAN}Checking PORT_CONFIGURATION.md...${NC}"
                if [ -f docs/PORT_CONFIGURATION.md ]; then
                    echo -e "${GREEN}✓${NC} PORT_CONFIGURATION.md exists"
                    # Check if ports in .env match documentation
                    if [ -f .env ]; then
                        source .env
                        if grep -q "8080" docs/PORT_CONFIGURATION.md && grep -q "8100" docs/PORT_CONFIGURATION.md; then
                            echo -e "${GREEN}✓${NC} Port documentation appears current"
                        else
                            echo -e "${YELLOW}⚠${NC}  Port documentation may be outdated"
                        fi
                    fi
                else
                    echo -e "${RED}✗${NC} PORT_CONFIGURATION.md missing"
                    errors=$((errors + 1))
                fi
                
                # Check DATABASE.md
                echo -e "${CYAN}Checking DATABASE.md...${NC}"
                if [ -f docs/DATABASE.md ]; then
                    echo -e "${GREEN}✓${NC} DATABASE.md exists"
                    # Check if it mentions the actual tables
                    if docker-compose exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\dt court_data.*" 2>/dev/null | grep -q "opinions_unified"; then
                        if grep -q "opinions_unified" docs/DATABASE.md; then
                            echo -e "${GREEN}✓${NC} Database documentation includes main tables"
                        else
                            echo -e "${YELLOW}⚠${NC}  Database documentation may be outdated"
                            errors=$((errors + 1))
                        fi
                    fi
                else
                    echo -e "${RED}✗${NC} DATABASE.md missing"
                    errors=$((errors + 1))
                fi
                
                echo ""
                if [ $errors -eq 0 ]; then
                    echo -e "${GREEN}✅ All documentation verified!${NC}"
                else
                    echo -e "${YELLOW}⚠ Found $errors documentation issue(s)${NC}"
                    echo "Run './dev docs update' to regenerate documentation"
                fi
                ;;
                
            update)
                echo -e "${BLUE}Updating documentation from current system...${NC}"
                echo -e "${YELLOW}This feature is planned but not yet implemented${NC}"
                echo "Would generate:"
                echo "  - SERVICE_DEPENDENCIES.md from docker-compose.yml"
                echo "  - DATABASE.md from actual database schema"
                echo "  - PORT_CONFIGURATION.md from running containers"
                ;;
                
            *)
                echo "Usage: ./dev docs [verify|update]"
                echo "  verify - Check documentation accuracy"
                echo "  update - Update docs from running system"
                ;;
        esac
        ;;
        
    db)
        case "$2" in
            schema)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Database Schema${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                if ! docker-compose ps | grep -q "db.*Up"; then
                    echo -e "${RED}Database is not running. Start it with './dev up'${NC}"
                    exit 1
                fi
                
                echo -e "${CYAN}Schemas:${NC}"
                docker-compose exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\dn" 2>/dev/null
                
                echo -e "${CYAN}Tables in court_data schema:${NC}"
                docker-compose exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\dt court_data.*" 2>/dev/null
                
                if [ "$3" = "--detailed" ]; then
                    echo ""
                    echo -e "${CYAN}Table structures:${NC}"
                    for table in opinions_unified judges cl_opinions cl_dockets; do
                        echo ""
                        echo -e "${YELLOW}Table: court_data.$table${NC}"
                        docker-compose exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" -c "\\d court_data.$table" 2>/dev/null | head -20
                    done
                fi
                ;;
                
            shell)
                check_requirements
                echo -e "${BLUE}Opening database shell...${NC}"
                docker-compose exec db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}"
                ;;
                
            backup)
                check_requirements
                echo -e "${BLUE}Creating database backup...${NC}"
                timestamp=$(date +%Y%m%d_%H%M%S)
                backup_dir="backups"
                mkdir -p "$backup_dir"
                
                if docker-compose exec -T db pg_dump -U "${DB_USER:-aletheia}" "${DB_NAME:-aletheia}" > "$backup_dir/db_backup_${timestamp}.sql" 2>/dev/null; then
                    echo -e "${GREEN}✓${NC} Database backed up to $backup_dir/db_backup_${timestamp}.sql"
                    size=$(du -h "$backup_dir/db_backup_${timestamp}.sql" | cut -f1)
                    echo "  Size: $size"
                else
                    echo -e "${RED}✗${NC} Database backup failed"
                    exit 1
                fi
                ;;
                
            restore)
                if [ -z "$3" ]; then
                    echo "Usage: ./dev db restore <backup_file>"
                    echo "Available backups:"
                    ls -la backups/*.sql 2>/dev/null || echo "No backups found"
                    exit 1
                fi
                
                if [ ! -f "$3" ]; then
                    echo -e "${RED}Backup file not found: $3${NC}"
                    exit 1
                fi
                
                echo -e "${YELLOW}⚠ WARNING: This will replace the current database!${NC}"
                read -p "Continue? (y/N): " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    echo -e "${BLUE}Restoring database...${NC}"
                    docker-compose exec -T db psql -U "${DB_USER:-aletheia}" -d "${DB_NAME:-aletheia}" < "$3"
                    echo -e "${GREEN}✓${NC} Database restored"
                fi
                ;;
                
            *)
                echo "Usage: ./dev db [schema|shell|backup|restore]"
                echo "  schema [--detailed] - Show database schema"
                echo "  shell              - Open PostgreSQL shell"
                echo "  backup             - Create database backup"
                echo "  restore <file>     - Restore from backup"
                ;;
        esac
        ;;
        
    doctor)
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo -e "${BLUE}  Comprehensive System Diagnostics${NC}"
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        echo ""
        
        issues=0
        warnings=0
        
        # 1. Check Docker
        echo -e "${CYAN}1. Docker Environment:${NC}"
        if ! command -v docker &> /dev/null; then
            echo -e "${RED}✗${NC} Docker not installed"
            echo -e "  ${YELLOW}→ Install from: https://www.docker.com/products/docker-desktop${NC}"
            ((issues++))
        else
            echo -e "${GREEN}✓${NC} Docker installed ($(docker --version 2>/dev/null | cut -d' ' -f3 | tr -d ','))"
            
            if ! docker info &> /dev/null; then
                echo -e "${RED}✗${NC} Docker daemon not running"
                echo -e "  ${YELLOW}→ Start Docker Desktop application${NC}"
                ((issues++))
            else
                echo -e "${GREEN}✓${NC} Docker daemon running"
                
                # Check Docker resources
                mem_limit=$(docker info 2>/dev/null | grep "Total Memory" | awk '{print $3}')
                if [ -n "$mem_limit" ]; then
                    echo -e "${GREEN}✓${NC} Docker memory: $mem_limit"
                fi
            fi
        fi
        
        if ! command -v docker-compose &> /dev/null; then
            echo -e "${RED}✗${NC} docker-compose not installed"
            ((issues++))
        else
            echo -e "${GREEN}✓${NC} docker-compose installed ($(docker-compose --version 2>/dev/null | cut -d' ' -f4 | tr -d ','))"
        fi
        echo ""
        
        # 2. Check Configuration
        echo -e "${CYAN}2. Configuration:${NC}"
        if [ ! -f .env ]; then
            echo -e "${RED}✗${NC} No .env file found"
            echo -e "  ${YELLOW}→ Run './dev setup' to create one${NC}"
            ((issues++))
        else
            echo -e "${GREEN}✓${NC} .env file exists"
            
            # Check for default passwords
            if grep -q "CHANGE_ME" .env 2>/dev/null; then
                echo -e "${RED}✗${NC} Found CHANGE_ME placeholders in .env"
                echo -e "  ${YELLOW}→ Update all CHANGE_ME values with secure passwords${NC}"
                ((issues++))
            fi
            
            if grep -q "aletheia123" .env 2>/dev/null; then
                echo -e "${YELLOW}⚠${NC} Weak default password detected"
                echo -e "  ${YELLOW}→ Update DB_PASSWORD with a secure password${NC}"
                ((warnings++))
            fi
            
            # Check required variables
            source .env 2>/dev/null
            missing=0
            for var in DB_USER DB_PASSWORD DB_NAME N8N_ENCRYPTION_KEY NEXTAUTH_SECRET; do
                if [ -z "${!var}" ]; then
                    echo -e "${RED}✗${NC} Missing required: $var"
                    ((missing++))
                fi
            done
            
            if [ $missing -eq 0 ]; then
                echo -e "${GREEN}✓${NC} All required variables set"
            else
                ((issues++))
            fi
        fi
        echo ""
        
        # 3. Check Ports
        echo -e "${CYAN}3. Port Availability:${NC}"
        port_issues=0
        for port_var in WEB_PORT N8N_PORT AI_PORTAL_PORT COURT_PROCESSOR_PORT POSTGRES_PORT REDIS_PORT; do
            port=${!port_var}
            if [ -z "$port" ]; then
                # Use defaults if not set
                case $port_var in
                    WEB_PORT) port=8080 ;;
                    N8N_PORT) port=8100 ;;
                    AI_PORTAL_PORT) port=8102 ;;
                    COURT_PROCESSOR_PORT) port=8104 ;;
                    POSTGRES_PORT) port=8200 ;;
                    REDIS_PORT) port=8201 ;;
                esac
            fi
            
            if lsof -i :$port &> /dev/null || netstat -an 2>/dev/null | grep -q ":$port.*LISTEN"; then
                echo -e "${RED}✗${NC} Port $port ($port_var) already in use"
                ((port_issues++))
            else
                echo -e "${GREEN}✓${NC} Port $port ($port_var) available"
            fi
        done
        
        if [ $port_issues -gt 0 ]; then
            echo -e "  ${YELLOW}→ Change port numbers in .env or stop conflicting services${NC}"
            ((warnings++))
        fi
        echo ""
        
        # 4. Check Services (if Docker is running)
        if docker info &> /dev/null; then
            echo -e "${CYAN}4. Service Status:${NC}"
            running=$(docker-compose ps --services --filter "status=running" 2>/dev/null | wc -l | tr -d ' ')
            total=$(docker-compose config --services 2>/dev/null | wc -l | tr -d ' ')
            
            if [ "$running" = "0" ]; then
                echo -e "${YELLOW}⚠${NC} No services running ($running/$total)"
                echo -e "  ${YELLOW}→ Run './dev up' to start services${NC}"
            else
                echo -e "${GREEN}✓${NC} Services running: $running/$total"
                
                # Check health status
                unhealthy=$(docker-compose ps 2>/dev/null | grep -c "(unhealthy)" || echo "0")
                if [ "$unhealthy" -gt "0" ]; then
                    echo -e "${YELLOW}⚠${NC} $unhealthy service(s) unhealthy"
                    echo -e "  ${YELLOW}→ Run './dev health' for details${NC}"
                    ((warnings++))
                fi
            fi
        else
            echo -e "${CYAN}4. Service Status:${NC}"
            echo -e "${YELLOW}⚠${NC} Cannot check services (Docker not running)"
        fi
        echo ""
        
        # 5. System Resources
        echo -e "${CYAN}5. System Resources:${NC}"
        
        # Check disk space
        if command -v df &> /dev/null; then
            disk_usage=$(df -h . 2>/dev/null | awk 'NR==2 {print $5}' | tr -d '%')
            disk_avail=$(df -h . 2>/dev/null | awk 'NR==2 {print $4}')
            
            if [ -n "$disk_usage" ]; then
                if [ "$disk_usage" -gt 90 ]; then
                    echo -e "${RED}✗${NC} Low disk space ($disk_avail available)"
                    ((warnings++))
                else
                    echo -e "${GREEN}✓${NC} Disk space: $disk_avail available"
                fi
            fi
        fi
        
        # Check memory (macOS/Linux)
        if command -v free &> /dev/null; then
            # Linux
            mem_avail=$(free -h 2>/dev/null | awk '/^Mem:/ {print $7}')
            if [ -n "$mem_avail" ]; then
                echo -e "${GREEN}✓${NC} Memory available: $mem_avail"
            fi
        elif command -v vm_stat &> /dev/null; then
            # macOS
            pages_free=$(vm_stat 2>/dev/null | grep "Pages free" | awk '{print $3}' | tr -d '.')
            if [ -n "$pages_free" ]; then
                mem_free_mb=$((pages_free * 4096 / 1024 / 1024))
                echo -e "${GREEN}✓${NC} Memory available: ~${mem_free_mb}MB free"
            fi
        fi
        echo ""
        
        # Summary
        echo -e "${BLUE}═══════════════════════════════════════${NC}"
        if [ $issues -eq 0 ] && [ $warnings -eq 0 ]; then
            echo -e "${GREEN}✅ System ready! All checks passed.${NC}"
            echo ""
            echo "Next steps:"
            if [ "$running" = "0" ]; then
                echo "  1. Run './dev up' to start services"
            else
                echo "  1. Services are running"
            fi
            echo "  2. Access http://localhost:8080"
        elif [ $issues -gt 0 ]; then
            echo -e "${RED}❌ Found $issues critical issue(s) and $warnings warning(s)${NC}"
            echo ""
            echo "Please fix the critical issues above before proceeding."
        else
            echo -e "${YELLOW}⚠ Found $warnings warning(s)${NC}"
            echo ""
            echo "System is functional but review warnings above."
        fi
        ;;
        
    env)
        case "$2" in
            check)
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo -e "${BLUE}  Environment Configuration Check${NC}"
                echo -e "${BLUE}═══════════════════════════════════════${NC}"
                echo ""
                
                if [ ! -f .env ]; then
                    echo -e "${RED}✗ No .env file found${NC}"
                    exit 1
                fi
                
                source .env
                
                # Required variables
                echo -e "${CYAN}Required Variables:${NC}"
                required_vars="DB_USER DB_PASSWORD DB_NAME N8N_ENCRYPTION_KEY NEXTAUTH_SECRET"
                missing=0
                
                for var in $required_vars; do
                    if [ -z "${!var}" ]; then
                        echo -e "${RED}✗${NC} $var is not set"
                        missing=$((missing + 1))
                    else
                        if [[ "$var" == *"PASSWORD"* ]] || [[ "$var" == *"SECRET"* ]] || [[ "$var" == *"KEY"* ]]; then
                            echo -e "${GREEN}✓${NC} $var is set (hidden)"
                        else
                            echo -e "${GREEN}✓${NC} $var = ${!var}"
                        fi
                    fi
                done
                
                # Optional variables
                echo ""
                echo -e "${CYAN}Port Configuration:${NC}"
                echo "  WEB_PORT = ${WEB_PORT:-8080}"
                echo "  N8N_PORT = ${N8N_PORT:-8100}"
                echo "  AI_PORTAL_PORT = ${AI_PORTAL_PORT:-8102}"
                echo "  POSTGRES_PORT = ${POSTGRES_PORT:-8200}"
                echo "  REDIS_PORT = ${REDIS_PORT:-8201}"
                
                # Check for default passwords
                echo ""
                echo -e "${CYAN}Security Check:${NC}"
                # Check for weak passwords
                if [[ "$DB_PASSWORD" =~ ^(password|123456|admin|default|aletheia123|postgres)$ ]]; then
                    echo -e "${YELLOW}⚠${NC}  DB_PASSWORD appears to be weak/default"
                else
                    echo -e "${GREEN}✓${NC} DB_PASSWORD appears strong"
                fi
                
                echo ""
                if [ $missing -eq 0 ]; then
                    echo -e "${GREEN}✅ All required variables are set${NC}"
                else
                    echo -e "${RED}✗ Missing $missing required variable(s)${NC}"
                fi
                ;;
                
            list)
                echo -e "${BLUE}Environment variables in use:${NC}"
                if [ -f .env ]; then
                    grep -E "^[A-Z]" .env | cut -d= -f1 | sort
                else
                    echo -e "${RED}No .env file found${NC}"
                fi
                ;;
                
            *)
                echo "Usage: ./dev env [check|list]"
                echo "  check - Verify all required variables are set"
                echo "  list  - List all environment variables"
                ;;
        esac
        ;;
        
    help|--help|-h|"")
        show_help
        ;;
        
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac