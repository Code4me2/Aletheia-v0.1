# Environment-specific Docker Compose overrides
# Use with: docker-compose -f docker-compose.yml -f docker-compose.env.yml up

version: '3.8'

services:
  # API Gateway service for service discovery
  api-gateway:
    image: nginx:alpine
    container_name: aletheia-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8081}:80"
    volumes:
      - ./nginx/gateway.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
      - n8n
      - lawyer-chat
      - ai-portal
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load balancer for horizontal scaling
  load-balancer:
    image: haproxy:alpine
    container_name: aletheia-load-balancer
    ports:
      - "${LOAD_BALANCER_PORT:-8083}:80"
      - "${LOAD_BALANCER_STATS_PORT:-8084}:8404"
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - web
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service discovery and configuration management
  consul:
    image: consul:latest
    container_name: aletheia-consul
    ports:
      - "${CONSUL_PORT:-8500}:8500"
      - "${CONSUL_DNS_PORT:-8600}:8600/udp"
    volumes:
      - consul_data:/consul/data
      - ./config/consul.json:/consul/config/consul.json:ro
    networks:
      - backend
    restart: unless-stopped
    command: >
      consul agent -server -bootstrap-expect=1 -client=0.0.0.0
      -config-file=/consul/config/consul.json

  # Enhanced monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aletheia-prometheus
    ports:
      - "${PROMETHEUS_PORT:-8300}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    networks:
      - backend
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aletheia-grafana
    ports:
      - "${GRAFANA_PORT:-8301}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - backend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SMTP_ENABLED=${GRAFANA_SMTP_ENABLED:-false}
    restart: unless-stopped

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: aletheia-loki
    ports:
      - "${LOKI_PORT:-8302}:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - backend
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: aletheia-promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - backend
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: aletheia-node-exporter
    ports:
      - "${NODE_EXPORTER_PORT:-8303}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - backend
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

volumes:
  consul_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true