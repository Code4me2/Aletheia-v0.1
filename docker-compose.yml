services:
  web:
    image: nginx:latest
    ports:
      - "${WEB_HOST}:${WEB_PORT}:80"
      - "${WEB_HOST}:${REVERSE_PROXY_PORT}:8082"
    volumes:
      - ./website:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - frontend
      - backend
    depends_on:
      - n8n
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  db:
    image: postgres:latest
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD}"  # Use environment variable
      POSTGRES_USER: "${DB_USER}"          # Use environment variable
      POSTGRES_DB: "${DB_NAME}"            # Use environment variable
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/01-init-databases.sh
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3

  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    ports:
      - "${N8N_PORT}:5678"
    environment:
      - N8N_HOST=${SERVICE_HOST:-0.0.0.0}
      - N8N_PORT=5678
      - NODE_ENV=production
      - N8N_ENCRYPTION_KEY="${N8N_ENCRYPTION_KEY}"  # Use environment variable
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_CORS_ENABLED=true
      - N8N_CORS_ALLOW_ORIGIN="${N8N_CORS_ORIGIN:-http://localhost:8080}"
      - EXECUTIONS_TIMEOUT=600  # 10 minutes
      - EXECUTIONS_TIMEOUT_MAX=3600  # 1 hour
      - N8N_CUSTOM_EXTENSIONS=/data/.n8n/custom
    volumes:
      - n8n_data:/data
      - ./n8n/local-files:/files
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  court-processor:
    build:
      context: ./court-processor
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      PYTHONPATH: /app
      COURTLISTENER_API_TOKEN: ${COURTLISTENER_API_TOKEN}
      PACER_USERNAME: ${PACER_USERNAME}
      PACER_PASSWORD: ${PACER_PASSWORD}
      RECAP_WEBHOOK_URL: http://recap-webhook:5000/webhook/recap-fetch
      # Database configuration for simplified_api.py
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SIMPLE_API_PORT: 8104
    ports:
      - "8104:8104"  # Expose simplified API for browser access
    volumes:
      - ./court-data/pdfs:/data/pdfs
      - ./court-data/logs:/data/logs
      - ./court-processor:/app
    depends_on:
      - db
      - recap-webhook
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8104/"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  recap-webhook:
    build:
      context: ./court-processor/api
      dockerfile: Dockerfile
    environment:
      COURTLISTENER_API_TOKEN: ${COURTLISTENER_API_TOKEN}
      RECAP_DOWNLOAD_DIR: /data/recap_downloads
      RECAP_WEBHOOK_SECRET: ${RECAP_WEBHOOK_SECRET}
      FLASK_ENV: production
      PYTHONPATH: /app/court-processor
    ports:
      - "${RECAP_WEBHOOK_PORT}:5000"
    volumes:
      - ./court-data/recap_downloads:/data/recap_downloads
      - ./court-processor:/app/court-processor
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  lawyer-chat:
    build: 
      context: ./services/lawyer-chat
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
        NEXT_PUBLIC_ENABLE_DOCUMENT_SELECTION: ${NEXT_PUBLIC_ENABLE_DOCUMENT_SELECTION}
        NEXT_PUBLIC_COURT_API_URL: ${NEXT_PUBLIC_COURT_API_URL}
        NEXT_PUBLIC_MAX_DOCUMENT_SELECTIONS: ${NEXT_PUBLIC_MAX_DOCUMENT_SELECTIONS}
    container_name: lawyer-chat
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - HOSTNAME=${SERVICE_HOST:-0.0.0.0}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/lawyerchat
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=http://localhost:${WEB_PORT}/chat
      - NEXT_PUBLIC_NEXTAUTH_URL=http://localhost:${WEB_PORT}/chat
      - NEXTAUTH_BASE_PATH=${NEXTAUTH_BASE_PATH:-/chat}
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - NEXT_PUBLIC_WEB_URL=${NEXT_PUBLIC_WEB_URL}
      - NEXT_PUBLIC_AI_PORTAL_URL=${NEXT_PUBLIC_AI_PORTAL_URL}
      - NEXT_PUBLIC_N8N_URL=${NEXT_PUBLIC_N8N_URL}
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook/${N8N_WEBHOOK_ID}
      - N8N_API_KEY=${N8N_API_KEY}
      - N8N_API_SECRET=${N8N_API_SECRET}
      - N8N_AUTH_BYPASS=${N8N_AUTH_BYPASS:-false}
      # Court Processor API config
      - COURT_API_BASE_URL=${COURT_API_BASE_URL}
      - NEXT_PUBLIC_COURT_API_URL=${NEXT_PUBLIC_COURT_API_URL}
      - NEXT_PUBLIC_MAX_DOCUMENT_SELECTIONS=${NEXT_PUBLIC_MAX_DOCUMENT_SELECTIONS}
      - NEXT_PUBLIC_ENABLE_DOCUMENT_SELECTION=${NEXT_PUBLIC_ENABLE_DOCUMENT_SELECTION}
      - NEXT_PUBLIC_N8N_WEBHOOK_URL=/webhook/${N8N_WEBHOOK_ID}
      # Email config
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      # Prisma
      - PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
      # Redis config
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - n8n
      - redis
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/chat"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-portal:
    build:
      context: ./services/ai-portal
      dockerfile: Dockerfile
    container_name: ai-portal-app
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_WEB_URL=${NEXT_PUBLIC_WEB_URL}
      - NEXT_PUBLIC_AI_PORTAL_URL=${NEXT_PUBLIC_AI_PORTAL_URL}
      - NEXT_PUBLIC_N8N_URL=${NEXT_PUBLIC_N8N_URL}
    networks:
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "node -e 'require(\"http\").get(\"http://localhost:3000/\", (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on(\"error\", () => process.exit(1))'"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-portal-nginx:
    image: nginx:alpine
    container_name: ai-portal-nginx
    restart: unless-stopped
    ports:
      - "${AI_PORTAL_PORT}:80"
    environment:
      - WEB_PORT=${WEB_PORT}
    volumes:
      - ./services/ai-portal/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ai-portal
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  docker-api:
    build:
      context: ./docker-api
      dockerfile: Dockerfile
    container_name: docker-api
    restart: unless-stopped
    ports:
      - "5002:5000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .:/workspace:ro
    networks:
      - frontend
    environment:
      - FLASK_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  n8n_data:
  redis_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge