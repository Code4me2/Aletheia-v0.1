version: '3.8'

# Staging-specific overrides
services:
  web:
    environment:
      - NODE_ENV=staging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
  
  db:
    # Use a specific PostgreSQL version for consistency
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_DB: "${DB_NAME}"
    # Add backup volume for staging
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/01-init-databases.sh
      - postgres_backup:/backup

  n8n:
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - NODE_ENV=staging
      - N8N_ENCRYPTION_KEY="${N8N_ENCRYPTION_KEY}"
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_CORS_ENABLED=true
      - N8N_CORS_ALLOW_ORIGIN="${N8N_CORS_ORIGIN}"
      - EXECUTIONS_TIMEOUT=600
      - EXECUTIONS_TIMEOUT_MAX=3600
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom
      - N8N_LOG_LEVEL=debug
      - N8N_METRICS=true
    # Add resource limits for staging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  court-processor:
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      PYTHONPATH: /app
      LOG_LEVEL: debug
    restart: unless-stopped

  lawyer-chat:
    environment:
      - NODE_ENV=staging
      - LOG_LEVEL=debug
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/lawyerchat_staging
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  ai-portal:
    environment:
      - NODE_ENV=staging
    
  # Staging-specific monitoring service
  monitoring:
    image: prom/node-exporter:latest
    container_name: monitoring
    ports:
      - "9100:9100"
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_backup:

# Use external networks for staging to allow cross-stack communication
networks:
  frontend:
    external: true
    name: staging_frontend
  backend:
    external: true
    name: staging_backend