name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (tag name)'
        required: true
        type: string
      skip_staging_check:
        description: 'Skip staging validation'
        required: false
        default: 'false'
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "ERROR: Invalid version format. Expected: v1.2.3 or v1.2.3-beta"
            echo "Provided: $VERSION"
            exit 1
          fi
          echo "Version format validated: $VERSION"

  validate-staging:
    name: Validate Staging
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: |
      always() && 
      (needs.validate-inputs.result == 'success' || needs.validate-inputs.result == 'skipped') &&
      github.event.inputs.skip_staging_check != 'true'
    steps:
      - name: Check staging health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.aletheia.example.com/health)
          if [ $response -ne 200 ]; then
            echo "Staging health check failed with status $response"
            exit 1
          fi
          echo "Staging is healthy"

      - name: Run staging smoke tests
        run: |
          # Add automated staging validation tests here
          echo "Running staging validation tests..."

  build:
    name: Build Production Images
    runs-on: ubuntu-latest
    needs: [validate-inputs, validate-staging]
    if: |
      always() && 
      (needs.validate-inputs.result == 'success' || needs.validate-inputs.result == 'skipped') &&
      (needs.validate-staging.result == 'success' || needs.validate-staging.result == 'skipped' || github.event.inputs.skip_staging_check == 'true')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push production images
        run: |
          # Build with production configuration
          docker-compose -f docker-compose.yml -f docker-compose.production.yml build --parallel
          
          # Tag and push with version and latest
          for service in web court-processor lawyer-chat ai-portal haystack; do
            docker tag aletheia-v01_${service}:latest ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:${{ steps.version.outputs.version }}
            docker tag aletheia-v01_${service}:latest ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:latest
            docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:${{ steps.version.outputs.version }}
            docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:latest
          done

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version || github.ref }}

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to production server
        id: deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/aletheia
            
            # Backup current state (credentials read from container environment)
            docker-compose -f docker-compose.yml -f docker-compose.production.yml exec -T db sh -c 'pg_dump -U "$POSTGRES_USER" "$POSTGRES_DB"' > /backup/pre-deploy-$(date +%Y%m%d-%H%M%S).sql
            
            # Verify backup was created
            if [ ! -s /backup/pre-deploy-*.sql ]; then
              echo "ERROR: Database backup failed"
              exit 1
            fi
            
            # Pull latest code
            git fetch --tags
            git checkout ${{ github.event.inputs.version || github.ref }}
            
            # Update environment
            cp .env.production .env
            
            # Pull new images
            docker-compose -f docker-compose.yml -f docker-compose.production.yml pull
            
            # Deploy with zero downtime
            docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --no-deps --scale web=2
            sleep 30
            docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --no-deps --remove-orphans
            
            # Cleanup
            docker system prune -f

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ steps.deploy.outcome }}',
              environment_url: 'https://aletheia.example.com',
              description: 'Deployment ${{ steps.deploy.outcome }}'
            });

      - name: Health check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/aletheia
            ./scripts/health-check.sh production

      - name: Run production smoke tests
        run: |
          # Add production smoke tests
          curl -f https://aletheia.example.com || exit 1
          curl -f https://aletheia.example.com/n8n/healthz || exit 1
          curl -f https://aletheia.example.com/chat/api/csrf || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Version: ${{ steps.version.outputs.version }}
            Environment: https://aletheia.example.com
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback if Failed
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/aletheia
            ./scripts/rollback.sh production

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Production deployment failed and was rolled back",
              color: "warning"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}